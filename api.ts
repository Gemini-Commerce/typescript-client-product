/* tslint:disable */
/* eslint-disable */
/**
 * Product Service
 * Introducing our revolutionary Product Management Service! Designed to streamline your product inventory and elevate customer experiences, our cutting-edge protobuf service is a game-changer in the world of efficient product management.  With our service, you can effortlessly create new products, allowing you to quickly bring your ideas to life and expand your catalog. Retrieve product information in a snap, providing accurate and personalized details to your customers based on their specific needs and preferences.  Stay ahead of the competition by easily updating product information, ensuring your catalog is always up-to-date and optimized. Seamlessly remove products from your inventory when needed, maintaining a clean and relevant product selection.  Enhance the visual appeal of your products with our advanced media gallery functionalities. Effortlessly add and update captivating images and videos to showcase your products in the best possible light, engaging your customers and driving conversions.  Personalization is key in today\'s market, and our service enables you to offer unique options to your customers. Easily create and manage lists of customizable options for your products, providing flexibility and tailoring to individual preferences.  Attributes play a vital role in defining products, and our service empowers you to effectively manage them. From bulk attribute creation to listing and retrieving attribute options, our service ensures your product information is rich and comprehensive.  Our service extends its capabilities to entity management, allowing you to effortlessly handle different entities and create customized options lists associated with them. This provides further flexibility and customization options for your product offerings.  When it comes to bulk updates, our service has you covered. Effortlessly update multiple products simultaneously, saving you time and streamlining your operations.  Finding specific products and variants is a breeze with our service. Quickly locate products based on their unique stock keeping unit (SKU) values, ensuring efficient inventory management and smooth order fulfillment.  Experience a new level of efficiency and productivity with our Product Management Service. Unlock the full potential of streamlined product management and empower your business to thrive in today\'s competitive market. Try our service today and elevate your product management to new heights!
 *
 * The version of the OpenAPI document: v1
 * Contact: info@gemini-commerce.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface BulkUpdateAssetsEntriesRequestUpdateEntity
 */
export interface BulkUpdateAssetsEntriesRequestUpdateEntity {
    /**
     * 
     * @type {string}
     * @memberof BulkUpdateAssetsEntriesRequestUpdateEntity
     */
    'id'?: string;
    /**
     * 
     * @type {ProductUpdateAssetEntryPayload}
     * @memberof BulkUpdateAssetsEntriesRequestUpdateEntity
     */
    'payload'?: ProductUpdateAssetEntryPayload;
    /**
     * 
     * @type {string}
     * @memberof BulkUpdateAssetsEntriesRequestUpdateEntity
     */
    'payloadMask'?: string;
}
/**
 * 
 * @export
 * @interface EntitymanagerAttribute
 */
export interface EntitymanagerAttribute {
    /**
     * 
     * @type {string}
     * @memberof EntitymanagerAttribute
     */
    'entityId'?: string;
    /**
     * 
     * @type {string}
     * @memberof EntitymanagerAttribute
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof EntitymanagerAttribute
     */
    'label'?: string;
    /**
     * 
     * @type {EntitymanagerTypes}
     * @memberof EntitymanagerAttribute
     */
    'type'?: EntitymanagerTypes;
    /**
     * 
     * @type {string}
     * @memberof EntitymanagerAttribute
     */
    'optionList'?: string;
    /**
     * 
     * @type {string}
     * @memberof EntitymanagerAttribute
     */
    'entity'?: string;
    /**
     * 
     * @type {string}
     * @memberof EntitymanagerAttribute
     */
    'default'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof EntitymanagerAttribute
     */
    'isRequired'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof EntitymanagerAttribute
     */
    'isSystem'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof EntitymanagerAttribute
     */
    'isRepeated'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof EntitymanagerAttribute
     */
    'sort'?: number;
    /**
     * 
     * @type {string}
     * @memberof EntitymanagerAttribute
     */
    'groupCode'?: string;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof EntitymanagerAttribute
     */
    'title'?: { [key: string]: string; };
    /**
     * 
     * @type {EntitymanagerRenderAs}
     * @memberof EntitymanagerAttribute
     */
    'renderAs'?: EntitymanagerRenderAs;
}


/**
 * 
 * @export
 * @interface EntitymanagerAttributeGroup
 */
export interface EntitymanagerAttributeGroup {
    /**
     * 
     * @type {string}
     * @memberof EntitymanagerAttributeGroup
     */
    'code'?: string;
    /**
     * 
     * @type {ProductentitymanagerLocalizedText}
     * @memberof EntitymanagerAttributeGroup
     */
    'label'?: ProductentitymanagerLocalizedText;
    /**
     * 
     * @type {number}
     * @memberof EntitymanagerAttributeGroup
     */
    'sort'?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof EntitymanagerAttributeGroup
     */
    'visibility'?: Array<string>;
}
/**
 * 
 * @export
 * @interface EntitymanagerAttributeOption
 */
export interface EntitymanagerAttributeOption {
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof EntitymanagerAttributeOption
     */
    'option'?: { [key: string]: string; };
    /**
     * 
     * @type {number}
     * @memberof EntitymanagerAttributeOption
     */
    'sort'?: number;
    /**
     * 
     * @type {string}
     * @memberof EntitymanagerAttributeOption
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof EntitymanagerAttributeOption
     */
    'code'?: string;
    /**
     * 
     * @type {ProductentitymanagerLocalizedText}
     * @memberof EntitymanagerAttributeOption
     */
    'value'?: ProductentitymanagerLocalizedText;
    /**
     * 
     * @type {Array<EntitymanagerAttributeOptionSwatch>}
     * @memberof EntitymanagerAttributeOption
     */
    'swatches'?: Array<EntitymanagerAttributeOptionSwatch>;
}
/**
 * 
 * @export
 * @interface EntitymanagerAttributeOptionErrors
 */
export interface EntitymanagerAttributeOptionErrors {
    /**
     * 
     * @type {string}
     * @memberof EntitymanagerAttributeOptionErrors
     */
    'error'?: string;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof EntitymanagerAttributeOptionErrors
     */
    'option'?: { [key: string]: string; };
}
/**
 * 
 * @export
 * @interface EntitymanagerAttributeOptionSwatch
 */
export interface EntitymanagerAttributeOptionSwatch {
    /**
     * 
     * @type {string}
     * @memberof EntitymanagerAttributeOptionSwatch
     */
    'grn'?: string;
    /**
     * 
     * @type {string}
     * @memberof EntitymanagerAttributeOptionSwatch
     */
    'hex'?: string;
}
/**
 * 
 * @export
 * @interface EntitymanagerAttributeWriteError
 */
export interface EntitymanagerAttributeWriteError {
    /**
     * 
     * @type {string}
     * @memberof EntitymanagerAttributeWriteError
     */
    'errorCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof EntitymanagerAttributeWriteError
     */
    'attributeCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof EntitymanagerAttributeWriteError
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface EntitymanagerAttributeWriteErrors
 */
export interface EntitymanagerAttributeWriteErrors {
    /**
     * 
     * @type {Array<EntitymanagerAttributeWriteError>}
     * @memberof EntitymanagerAttributeWriteErrors
     */
    'attributeWriteErrors'?: Array<EntitymanagerAttributeWriteError>;
}
/**
 * 
 * @export
 * @interface EntitymanagerBulkCreateAttributeRequest
 */
export interface EntitymanagerBulkCreateAttributeRequest {
    /**
     * 
     * @type {string}
     * @memberof EntitymanagerBulkCreateAttributeRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {EntitymanagerEntityIdentifier}
     * @memberof EntitymanagerBulkCreateAttributeRequest
     */
    'entityData'?: EntitymanagerEntityIdentifier;
    /**
     * 
     * @type {string}
     * @memberof EntitymanagerBulkCreateAttributeRequest
     */
    'entityId'?: string;
    /**
     * 
     * @type {Array<EntitymanagerAttribute>}
     * @memberof EntitymanagerBulkCreateAttributeRequest
     */
    'attributes'?: Array<EntitymanagerAttribute>;
}
/**
 * 
 * @export
 * @interface EntitymanagerBulkCreateAttributeResponse
 */
export interface EntitymanagerBulkCreateAttributeResponse {
    /**
     * 
     * @type {Array<EntitymanagerAttribute>}
     * @memberof EntitymanagerBulkCreateAttributeResponse
     */
    'attributes'?: Array<EntitymanagerAttribute>;
}
/**
 * 
 * @export
 * @interface EntitymanagerCreateAttributeGroupRequest
 */
export interface EntitymanagerCreateAttributeGroupRequest {
    /**
     * 
     * @type {string}
     * @memberof EntitymanagerCreateAttributeGroupRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof EntitymanagerCreateAttributeGroupRequest
     */
    'code'?: string;
    /**
     * 
     * @type {ProductentitymanagerLocalizedText}
     * @memberof EntitymanagerCreateAttributeGroupRequest
     */
    'label'?: ProductentitymanagerLocalizedText;
    /**
     * 
     * @type {number}
     * @memberof EntitymanagerCreateAttributeGroupRequest
     */
    'sort'?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof EntitymanagerCreateAttributeGroupRequest
     */
    'visibility'?: Array<string>;
}
/**
 * 
 * @export
 * @interface EntitymanagerCreateAttributeOptionsRequest
 */
export interface EntitymanagerCreateAttributeOptionsRequest {
    /**
     * 
     * @type {string}
     * @memberof EntitymanagerCreateAttributeOptionsRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof EntitymanagerCreateAttributeOptionsRequest
     */
    'listCode'?: string;
    /**
     * 
     * @type {Array<EntitymanagerAttributeOption>}
     * @memberof EntitymanagerCreateAttributeOptionsRequest
     */
    'options'?: Array<EntitymanagerAttributeOption>;
}
/**
 * 
 * @export
 * @interface EntitymanagerCreateAttributeOptionsResponse
 */
export interface EntitymanagerCreateAttributeOptionsResponse {
    /**
     * 
     * @type {Array<EntitymanagerAttributeOption>}
     * @memberof EntitymanagerCreateAttributeOptionsResponse
     */
    'options'?: Array<EntitymanagerAttributeOption>;
    /**
     * 
     * @type {Array<EntitymanagerAttributeOptionErrors>}
     * @memberof EntitymanagerCreateAttributeOptionsResponse
     */
    'errors'?: Array<EntitymanagerAttributeOptionErrors>;
}
/**
 * 
 * @export
 * @interface EntitymanagerCreateEntityResponse
 */
export interface EntitymanagerCreateEntityResponse {
    /**
     * 
     * @type {EntitymanagerAttributeWriteErrors}
     * @memberof EntitymanagerCreateEntityResponse
     */
    'attributeWriteErrors'?: EntitymanagerAttributeWriteErrors;
    /**
     * 
     * @type {EntitymanagerEntity}
     * @memberof EntitymanagerCreateEntityResponse
     */
    'entity'?: EntitymanagerEntity;
}
/**
 * 
 * @export
 * @interface EntitymanagerCreateOptionsListRequest
 */
export interface EntitymanagerCreateOptionsListRequest {
    /**
     * 
     * @type {string}
     * @memberof EntitymanagerCreateOptionsListRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {EntitymanagerOptionsList}
     * @memberof EntitymanagerCreateOptionsListRequest
     */
    'optionList'?: EntitymanagerOptionsList;
}
/**
 * 
 * @export
 * @interface EntitymanagerCreateOptionsListResponse
 */
export interface EntitymanagerCreateOptionsListResponse {
    /**
     * 
     * @type {EntitymanagerOptionsList}
     * @memberof EntitymanagerCreateOptionsListResponse
     */
    'optionList'?: EntitymanagerOptionsList;
}
/**
 * 
 * @export
 * @interface EntitymanagerDeleteAttributeRequest
 */
export interface EntitymanagerDeleteAttributeRequest {
    /**
     * 
     * @type {string}
     * @memberof EntitymanagerDeleteAttributeRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {EntitymanagerEntityIdentifier}
     * @memberof EntitymanagerDeleteAttributeRequest
     */
    'entityData'?: EntitymanagerEntityIdentifier;
    /**
     * 
     * @type {string}
     * @memberof EntitymanagerDeleteAttributeRequest
     */
    'entityId'?: string;
    /**
     * 
     * @type {string}
     * @memberof EntitymanagerDeleteAttributeRequest
     */
    'code'?: string;
}
/**
 * 
 * @export
 * @interface EntitymanagerEntity
 */
export interface EntitymanagerEntity {
    /**
     * 
     * @type {string}
     * @memberof EntitymanagerEntity
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof EntitymanagerEntity
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof EntitymanagerEntity
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof EntitymanagerEntity
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof EntitymanagerEntity
     */
    'parentCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof EntitymanagerEntity
     */
    'label'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof EntitymanagerEntity
     */
    'relationships'?: Array<string>;
    /**
     * 
     * @type {Array<EntitymanagerAttribute>}
     * @memberof EntitymanagerEntity
     */
    'attributes'?: Array<EntitymanagerAttribute>;
}
/**
 * 
 * @export
 * @interface EntitymanagerEntityIdentifier
 */
export interface EntitymanagerEntityIdentifier {
    /**
     * 
     * @type {string}
     * @memberof EntitymanagerEntityIdentifier
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof EntitymanagerEntityIdentifier
     */
    'code'?: string;
}
/**
 * 
 * @export
 * @interface EntitymanagerEntityRequest
 */
export interface EntitymanagerEntityRequest {
    /**
     * 
     * @type {string}
     * @memberof EntitymanagerEntityRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {EntitymanagerEntityIdentifier}
     * @memberof EntitymanagerEntityRequest
     */
    'entityData'?: EntitymanagerEntityIdentifier;
    /**
     * 
     * @type {string}
     * @memberof EntitymanagerEntityRequest
     */
    'entityId'?: string;
}
/**
 * 
 * @export
 * @interface EntitymanagerGetAttributeGroupRequest
 */
export interface EntitymanagerGetAttributeGroupRequest {
    /**
     * 
     * @type {string}
     * @memberof EntitymanagerGetAttributeGroupRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof EntitymanagerGetAttributeGroupRequest
     */
    'code'?: string;
}
/**
 * 
 * @export
 * @interface EntitymanagerGetAttributeOptionRequest
 */
export interface EntitymanagerGetAttributeOptionRequest {
    /**
     * 
     * @type {string}
     * @memberof EntitymanagerGetAttributeOptionRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof EntitymanagerGetAttributeOptionRequest
     */
    'listCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof EntitymanagerGetAttributeOptionRequest
     */
    'optionId'?: string;
}
/**
 * 
 * @export
 * @interface EntitymanagerGetAttributeOptionResponse
 */
export interface EntitymanagerGetAttributeOptionResponse {
    /**
     * 
     * @type {EntitymanagerAttributeOption}
     * @memberof EntitymanagerGetAttributeOptionResponse
     */
    'option'?: EntitymanagerAttributeOption;
}
/**
 * 
 * @export
 * @interface EntitymanagerGetAttributeOptionsRequest
 */
export interface EntitymanagerGetAttributeOptionsRequest {
    /**
     * 
     * @type {string}
     * @memberof EntitymanagerGetAttributeOptionsRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {Array<EntitymanagerGetAttributeOptionsRequestOption>}
     * @memberof EntitymanagerGetAttributeOptionsRequest
     */
    'optionIds'?: Array<EntitymanagerGetAttributeOptionsRequestOption>;
}
/**
 * 
 * @export
 * @interface EntitymanagerGetAttributeOptionsRequestOption
 */
export interface EntitymanagerGetAttributeOptionsRequestOption {
    /**
     * 
     * @type {string}
     * @memberof EntitymanagerGetAttributeOptionsRequestOption
     */
    'listCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof EntitymanagerGetAttributeOptionsRequestOption
     */
    'optionId'?: string;
}
/**
 * 
 * @export
 * @interface EntitymanagerGetAttributeOptionsResponse
 */
export interface EntitymanagerGetAttributeOptionsResponse {
    /**
     * 
     * @type {Array<EntitymanagerGetAttributeOptionsResponseOption>}
     * @memberof EntitymanagerGetAttributeOptionsResponse
     */
    'options'?: Array<EntitymanagerGetAttributeOptionsResponseOption>;
}
/**
 * 
 * @export
 * @interface EntitymanagerGetAttributeOptionsResponseOption
 */
export interface EntitymanagerGetAttributeOptionsResponseOption {
    /**
     * 
     * @type {string}
     * @memberof EntitymanagerGetAttributeOptionsResponseOption
     */
    'listCode'?: string;
    /**
     * 
     * @type {EntitymanagerAttributeOption}
     * @memberof EntitymanagerGetAttributeOptionsResponseOption
     */
    'option'?: EntitymanagerAttributeOption;
}
/**
 * 
 * @export
 * @interface EntitymanagerGetOptionsListRequest
 */
export interface EntitymanagerGetOptionsListRequest {
    /**
     * 
     * @type {string}
     * @memberof EntitymanagerGetOptionsListRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof EntitymanagerGetOptionsListRequest
     */
    'listCode'?: string;
}
/**
 * 
 * @export
 * @interface EntitymanagerGetOptionsListResponse
 */
export interface EntitymanagerGetOptionsListResponse {
    /**
     * 
     * @type {EntitymanagerOptionsList}
     * @memberof EntitymanagerGetOptionsListResponse
     */
    'optionList'?: EntitymanagerOptionsList;
}
/**
 * 
 * @export
 * @interface EntitymanagerListAttributeGroupsRequest
 */
export interface EntitymanagerListAttributeGroupsRequest {
    /**
     * 
     * @type {string}
     * @memberof EntitymanagerListAttributeGroupsRequest
     */
    'tenantId'?: string;
}
/**
 * 
 * @export
 * @interface EntitymanagerListAttributeGroupsResponse
 */
export interface EntitymanagerListAttributeGroupsResponse {
    /**
     * 
     * @type {Array<EntitymanagerAttributeGroup>}
     * @memberof EntitymanagerListAttributeGroupsResponse
     */
    'attributeGroups'?: Array<EntitymanagerAttributeGroup>;
}
/**
 * 
 * @export
 * @interface EntitymanagerListAttributeOptionsRequest
 */
export interface EntitymanagerListAttributeOptionsRequest {
    /**
     * 
     * @type {string}
     * @memberof EntitymanagerListAttributeOptionsRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof EntitymanagerListAttributeOptionsRequest
     */
    'listCode'?: string;
}
/**
 * 
 * @export
 * @interface EntitymanagerListAttributeOptionsResponse
 */
export interface EntitymanagerListAttributeOptionsResponse {
    /**
     * 
     * @type {Array<EntitymanagerAttributeOption>}
     * @memberof EntitymanagerListAttributeOptionsResponse
     */
    'options'?: Array<EntitymanagerAttributeOption>;
}
/**
 * 
 * @export
 * @interface EntitymanagerListEntitiesRequest
 */
export interface EntitymanagerListEntitiesRequest {
    /**
     * 
     * @type {string}
     * @memberof EntitymanagerListEntitiesRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {number}
     * @memberof EntitymanagerListEntitiesRequest
     */
    'pageSize'?: number;
}
/**
 * 
 * @export
 * @interface EntitymanagerListEntitiesResponse
 */
export interface EntitymanagerListEntitiesResponse {
    /**
     * 
     * @type {Array<EntitymanagerEntity>}
     * @memberof EntitymanagerListEntitiesResponse
     */
    'entities'?: Array<EntitymanagerEntity>;
    /**
     * 
     * @type {number}
     * @memberof EntitymanagerListEntitiesResponse
     */
    'nextPage'?: number;
}
/**
 * 
 * @export
 * @interface EntitymanagerListOptionsListsRequest
 */
export interface EntitymanagerListOptionsListsRequest {
    /**
     * 
     * @type {string}
     * @memberof EntitymanagerListOptionsListsRequest
     */
    'tenantId'?: string;
}
/**
 * 
 * @export
 * @interface EntitymanagerListOptionsListsResponse
 */
export interface EntitymanagerListOptionsListsResponse {
    /**
     * 
     * @type {Array<EntitymanagerOptionsList>}
     * @memberof EntitymanagerListOptionsListsResponse
     */
    'options'?: Array<EntitymanagerOptionsList>;
}
/**
 * 
 * @export
 * @interface EntitymanagerOptionsList
 */
export interface EntitymanagerOptionsList {
    /**
     * 
     * @type {string}
     * @memberof EntitymanagerOptionsList
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof EntitymanagerOptionsList
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const EntitymanagerRenderAs = {
    Default: 'DEFAULT',
    Wysiwyg: 'WYSIWYG'
} as const;

export type EntitymanagerRenderAs = typeof EntitymanagerRenderAs[keyof typeof EntitymanagerRenderAs];


/**
 * 
 * @export
 * @enum {string}
 */

export const EntitymanagerTypes = {
    Text: 'TEXT',
    Number: 'NUMBER',
    Boolean: 'BOOLEAN',
    Datetime: 'DATETIME',
    External: 'EXTERNAL',
    Embed: 'EMBED',
    Float32: 'FLOAT32'
} as const;

export type EntitymanagerTypes = typeof EntitymanagerTypes[keyof typeof EntitymanagerTypes];


/**
 * 
 * @export
 * @interface EntitymanagerUpdateAttributeGroupRequest
 */
export interface EntitymanagerUpdateAttributeGroupRequest {
    /**
     * 
     * @type {string}
     * @memberof EntitymanagerUpdateAttributeGroupRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof EntitymanagerUpdateAttributeGroupRequest
     */
    'code'?: string;
    /**
     * 
     * @type {EntitymanagerUpdateAttributeGroupRequestPayload}
     * @memberof EntitymanagerUpdateAttributeGroupRequest
     */
    'payload'?: EntitymanagerUpdateAttributeGroupRequestPayload;
    /**
     * 
     * @type {string}
     * @memberof EntitymanagerUpdateAttributeGroupRequest
     */
    'fieldMask'?: string;
}
/**
 * 
 * @export
 * @interface EntitymanagerUpdateAttributeGroupRequestPayload
 */
export interface EntitymanagerUpdateAttributeGroupRequestPayload {
    /**
     * 
     * @type {ProductentitymanagerLocalizedText}
     * @memberof EntitymanagerUpdateAttributeGroupRequestPayload
     */
    'label'?: ProductentitymanagerLocalizedText;
    /**
     * 
     * @type {number}
     * @memberof EntitymanagerUpdateAttributeGroupRequestPayload
     */
    'sort'?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof EntitymanagerUpdateAttributeGroupRequestPayload
     */
    'visibility'?: Array<string>;
}
/**
 * 
 * @export
 * @interface EntitymanagerUpdateAttributeOptionsRequest
 */
export interface EntitymanagerUpdateAttributeOptionsRequest {
    /**
     * 
     * @type {string}
     * @memberof EntitymanagerUpdateAttributeOptionsRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof EntitymanagerUpdateAttributeOptionsRequest
     */
    'listCode'?: string;
    /**
     * 
     * @type {Array<EntitymanagerAttributeOption>}
     * @memberof EntitymanagerUpdateAttributeOptionsRequest
     */
    'options'?: Array<EntitymanagerAttributeOption>;
}
/**
 * 
 * @export
 * @interface EntitymanagerUpdateAttributeOptionsResponse
 */
export interface EntitymanagerUpdateAttributeOptionsResponse {
    /**
     * 
     * @type {Array<EntitymanagerAttributeOption>}
     * @memberof EntitymanagerUpdateAttributeOptionsResponse
     */
    'options'?: Array<EntitymanagerAttributeOption>;
    /**
     * 
     * @type {Array<EntitymanagerAttributeOptionErrors>}
     * @memberof EntitymanagerUpdateAttributeOptionsResponse
     */
    'errors'?: Array<EntitymanagerAttributeOptionErrors>;
}
/**
 * 
 * @export
 * @interface EntitymanagerUpdateAttributeRequest
 */
export interface EntitymanagerUpdateAttributeRequest {
    /**
     * 
     * @type {string}
     * @memberof EntitymanagerUpdateAttributeRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof EntitymanagerUpdateAttributeRequest
     */
    'code'?: string;
    /**
     * 
     * @type {EntitymanagerEntityIdentifier}
     * @memberof EntitymanagerUpdateAttributeRequest
     */
    'entityData'?: EntitymanagerEntityIdentifier;
    /**
     * 
     * @type {string}
     * @memberof EntitymanagerUpdateAttributeRequest
     */
    'entityId'?: string;
    /**
     * 
     * @type {EntitymanagerUpdateAttributeRequestPayload}
     * @memberof EntitymanagerUpdateAttributeRequest
     */
    'payload'?: EntitymanagerUpdateAttributeRequestPayload;
    /**
     * 
     * @type {string}
     * @memberof EntitymanagerUpdateAttributeRequest
     */
    'fieldMask'?: string;
}
/**
 * 
 * @export
 * @interface EntitymanagerUpdateAttributeRequestPayload
 */
export interface EntitymanagerUpdateAttributeRequestPayload {
    /**
     * 
     * @type {string}
     * @memberof EntitymanagerUpdateAttributeRequestPayload
     */
    'label'?: string;
    /**
     * 
     * @type {string}
     * @memberof EntitymanagerUpdateAttributeRequestPayload
     */
    'default'?: string;
    /**
     * 
     * @type {number}
     * @memberof EntitymanagerUpdateAttributeRequestPayload
     */
    'sort'?: number;
    /**
     * 
     * @type {string}
     * @memberof EntitymanagerUpdateAttributeRequestPayload
     */
    'groupCode'?: string;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof EntitymanagerUpdateAttributeRequestPayload
     */
    'title'?: { [key: string]: string; };
    /**
     * 
     * @type {EntitymanagerRenderAs}
     * @memberof EntitymanagerUpdateAttributeRequestPayload
     */
    'renderAs'?: EntitymanagerRenderAs;
}


/**
 * 
 * @export
 * @interface EntitymanagerUpdateOptionsListRequest
 */
export interface EntitymanagerUpdateOptionsListRequest {
    /**
     * 
     * @type {string}
     * @memberof EntitymanagerUpdateOptionsListRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {EntitymanagerOptionsList}
     * @memberof EntitymanagerUpdateOptionsListRequest
     */
    'optionList'?: EntitymanagerOptionsList;
}
/**
 * 
 * @export
 * @interface EntitymanagerUpdateOptionsListResponse
 */
export interface EntitymanagerUpdateOptionsListResponse {
    /**
     * 
     * @type {EntitymanagerOptionsList}
     * @memberof EntitymanagerUpdateOptionsListResponse
     */
    'optionList'?: EntitymanagerOptionsList;
}
/**
 * 
 * @export
 * @interface ListProductsRequestFilter
 */
export interface ListProductsRequestFilter {
    /**
     * 
     * @type {string}
     * @memberof ListProductsRequestFilter
     */
    'createdAtStart'?: string;
    /**
     * 
     * @type {string}
     * @memberof ListProductsRequestFilter
     */
    'createdAtEnd'?: string;
    /**
     * 
     * @type {string}
     * @memberof ListProductsRequestFilter
     */
    'updatedAtStart'?: string;
    /**
     * 
     * @type {string}
     * @memberof ListProductsRequestFilter
     */
    'updatedAtEnd'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ListProductsRequestFilter
     */
    'status'?: boolean;
}
/**
 * 
 * @export
 * @interface ProductAddMediaGalleryEntryRequest
 */
export interface ProductAddMediaGalleryEntryRequest {
    /**
     * 
     * @type {string}
     * @memberof ProductAddMediaGalleryEntryRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductAddMediaGalleryEntryRequest
     */
    'productId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductAddMediaGalleryEntryRequest
     */
    'assetGrn'?: string;
    /**
     * 
     * @type {number}
     * @memberof ProductAddMediaGalleryEntryRequest
     */
    'position'?: number;
    /**
     * 
     * @type {Array<ProductMediaGalleryEntryMetadata>}
     * @memberof ProductAddMediaGalleryEntryRequest
     */
    'metadata'?: Array<ProductMediaGalleryEntryMetadata>;
}
/**
 * 
 * @export
 * @interface ProductAddMediaGalleryEntryResponse
 */
export interface ProductAddMediaGalleryEntryResponse {
    /**
     * 
     * @type {ProductMediaGalleryEntry}
     * @memberof ProductAddMediaGalleryEntryResponse
     */
    'mediaGalleryEntry'?: ProductMediaGalleryEntry;
}
/**
 * 
 * @export
 * @interface ProductAssetData
 */
export interface ProductAssetData {
    /**
     * 
     * @type {string}
     * @memberof ProductAssetData
     */
    'assetGrn'?: string;
    /**
     * 
     * @type {ProductLocalizedAsset}
     * @memberof ProductAssetData
     */
    'localizedAssetGrn'?: ProductLocalizedAsset;
    /**
     * 
     * @type {number}
     * @memberof ProductAssetData
     */
    'position'?: number;
    /**
     * 
     * @type {Array<ProductAssetsEntryMetadata>}
     * @memberof ProductAssetData
     */
    'metadata'?: Array<ProductAssetsEntryMetadata>;
}
/**
 * 
 * @export
 * @interface ProductAssets
 */
export interface ProductAssets {
    /**
     * 
     * @type {Array<ProductAssetsEntry>}
     * @memberof ProductAssets
     */
    'entries'?: Array<ProductAssetsEntry>;
}
/**
 * 
 * @export
 * @interface ProductAssetsEntry
 */
export interface ProductAssetsEntry {
    /**
     * 
     * @type {string}
     * @memberof ProductAssetsEntry
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductAssetsEntry
     */
    'assetGrn'?: string;
    /**
     * 
     * @type {ProductLocalizedAsset}
     * @memberof ProductAssetsEntry
     */
    'localizedAssetGrn'?: ProductLocalizedAsset;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductAssetsEntry
     */
    'locales'?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof ProductAssetsEntry
     */
    'position'?: number;
    /**
     * 
     * @type {Array<ProductAssetsEntryMetadata>}
     * @memberof ProductAssetsEntry
     */
    'metadata'?: Array<ProductAssetsEntryMetadata>;
}
/**
 * 
 * @export
 * @interface ProductAssetsEntryMetadata
 */
export interface ProductAssetsEntryMetadata {
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductAssetsEntryMetadata
     */
    'roles'?: Array<string>;
    /**
     * 
     * @type {ProductLocalizedText}
     * @memberof ProductAssetsEntryMetadata
     */
    'alt'?: ProductLocalizedText;
}
/**
 * 
 * @export
 * @interface ProductAttributeResponseError
 */
export interface ProductAttributeResponseError {
    /**
     * 
     * @type {string}
     * @memberof ProductAttributeResponseError
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductAttributeResponseError
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductAttributeResponseError
     */
    'attributeCode'?: string;
}
/**
 * 
 * @export
 * @interface ProductBulkAddAssetsEntriesRequest
 */
export interface ProductBulkAddAssetsEntriesRequest {
    /**
     * 
     * @type {string}
     * @memberof ProductBulkAddAssetsEntriesRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductBulkAddAssetsEntriesRequest
     */
    'productId'?: string;
    /**
     * 
     * @type {Array<ProductAssetData>}
     * @memberof ProductBulkAddAssetsEntriesRequest
     */
    'assets'?: Array<ProductAssetData>;
}
/**
 * 
 * @export
 * @interface ProductBulkAddAssetsEntriesResponse
 */
export interface ProductBulkAddAssetsEntriesResponse {
    /**
     * 
     * @type {Array<ProductAssetsEntry>}
     * @memberof ProductBulkAddAssetsEntriesResponse
     */
    'assets'?: Array<ProductAssetsEntry>;
}
/**
 * 
 * @export
 * @interface ProductBulkDeleteProductsRequest
 */
export interface ProductBulkDeleteProductsRequest {
    /**
     * 
     * @type {string}
     * @memberof ProductBulkDeleteProductsRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductBulkDeleteProductsRequest
     */
    'ids'?: Array<string>;
}
/**
 * 
 * @export
 * @interface ProductBulkRemoveAssetsEntriesRequest
 */
export interface ProductBulkRemoveAssetsEntriesRequest {
    /**
     * 
     * @type {string}
     * @memberof ProductBulkRemoveAssetsEntriesRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductBulkRemoveAssetsEntriesRequest
     */
    'productId'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductBulkRemoveAssetsEntriesRequest
     */
    'ids'?: Array<string>;
}
/**
 * 
 * @export
 * @interface ProductBulkUpdateAssetsEntriesRequest
 */
export interface ProductBulkUpdateAssetsEntriesRequest {
    /**
     * 
     * @type {string}
     * @memberof ProductBulkUpdateAssetsEntriesRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductBulkUpdateAssetsEntriesRequest
     */
    'productId'?: string;
    /**
     * 
     * @type {Array<BulkUpdateAssetsEntriesRequestUpdateEntity>}
     * @memberof ProductBulkUpdateAssetsEntriesRequest
     */
    'assets'?: Array<BulkUpdateAssetsEntriesRequestUpdateEntity>;
}
/**
 * 
 * @export
 * @interface ProductBulkUpdateAssetsEntriesResponse
 */
export interface ProductBulkUpdateAssetsEntriesResponse {
    /**
     * 
     * @type {Array<ProductAssetsEntry>}
     * @memberof ProductBulkUpdateAssetsEntriesResponse
     */
    'assets'?: Array<ProductAssetsEntry>;
}
/**
 * 
 * @export
 * @interface ProductBulkUpdateRequest
 */
export interface ProductBulkUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof ProductBulkUpdateRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductBulkUpdateRequest
     */
    'productIds'?: Array<string>;
    /**
     * 
     * @type {ProductBulkUpdateRequestPayload}
     * @memberof ProductBulkUpdateRequest
     */
    'payload'?: ProductBulkUpdateRequestPayload;
}
/**
 * 
 * @export
 * @interface ProductBulkUpdateRequestPayload
 */
export interface ProductBulkUpdateRequestPayload {
    /**
     * 
     * @type {ProductFieldMask}
     * @memberof ProductBulkUpdateRequestPayload
     */
    'updateMask'?: ProductFieldMask;
    /**
     * 
     * @type {{ [key: string]: ProtobufAny; }}
     * @memberof ProductBulkUpdateRequestPayload
     */
    'attributes'?: { [key: string]: ProtobufAny; };
}
/**
 * 
 * @export
 * @interface ProductBulkUpdateRequestV2
 */
export interface ProductBulkUpdateRequestV2 {
    /**
     * 
     * @type {string}
     * @memberof ProductBulkUpdateRequestV2
     */
    'tenantId'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductBulkUpdateRequestV2
     */
    'productIds'?: Array<string>;
    /**
     * 
     * @type {ProductBulkUpdateRequestV2Payload}
     * @memberof ProductBulkUpdateRequestV2
     */
    'payload'?: ProductBulkUpdateRequestV2Payload;
}
/**
 * 
 * @export
 * @interface ProductBulkUpdateRequestV2Payload
 */
export interface ProductBulkUpdateRequestV2Payload {
    /**
     * 
     * @type {ProductFieldMask}
     * @memberof ProductBulkUpdateRequestV2Payload
     */
    'updateMask'?: ProductFieldMask;
    /**
     * 
     * @type {{ [key: string]: ProtobufAny; }}
     * @memberof ProductBulkUpdateRequestV2Payload
     */
    'attributes'?: { [key: string]: ProtobufAny; };
}
/**
 * 
 * @export
 * @interface ProductBulkUpdateResponse
 */
export interface ProductBulkUpdateResponse {
    /**
     * 
     * @type {Array<ProductBulkUpdateResponseResponse>}
     * @memberof ProductBulkUpdateResponse
     */
    'productResponse'?: Array<ProductBulkUpdateResponseResponse>;
}
/**
 * 
 * @export
 * @interface ProductBulkUpdateResponseResponse
 */
export interface ProductBulkUpdateResponseResponse {
    /**
     * 
     * @type {string}
     * @memberof ProductBulkUpdateResponseResponse
     */
    'productId'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ProductBulkUpdateResponseResponse
     */
    'success'?: boolean;
    /**
     * 
     * @type {{ [key: string]: ProtobufAny; }}
     * @memberof ProductBulkUpdateResponseResponse
     */
    'attributes'?: { [key: string]: ProtobufAny; };
}
/**
 * 
 * @export
 * @interface ProductBulkUpdateResponseV2
 */
export interface ProductBulkUpdateResponseV2 {
    /**
     * 
     * @type {Array<ProductBulkUpdateResponseV2Response>}
     * @memberof ProductBulkUpdateResponseV2
     */
    'productResponse'?: Array<ProductBulkUpdateResponseV2Response>;
}
/**
 * 
 * @export
 * @interface ProductBulkUpdateResponseV2Response
 */
export interface ProductBulkUpdateResponseV2Response {
    /**
     * 
     * @type {string}
     * @memberof ProductBulkUpdateResponseV2Response
     */
    'productId'?: string;
    /**
     * 
     * @type {{ [key: string]: ProtobufAny; }}
     * @memberof ProductBulkUpdateResponseV2Response
     */
    'attributes'?: { [key: string]: ProtobufAny; };
}
/**
 * The CreateProductRequest message is used to create a new product within the system. It contains various fields that allow specifying the details and attributes of the product.
 * @export
 * @interface ProductCreateProductRequest
 */
export interface ProductCreateProductRequest {
    /**
     * Represents the ID of the tenant associated with the product.
     * @type {string}
     * @memberof ProductCreateProductRequest
     */
    'tenantId'?: string;
    /**
     * Specifies the type of entity for the product.
     * @type {string}
     * @memberof ProductCreateProductRequest
     */
    'entityType'?: string;
    /**
     * Indicates the code of the entity associated with the product.
     * @type {string}
     * @memberof ProductCreateProductRequest
     */
    'entityCode'?: string;
    /**
     * Represents the unique code or identifier for the product.
     * @type {string}
     * @memberof ProductCreateProductRequest
     */
    'code'?: string;
    /**
     * Specifies whether the product has variants or not.
     * @type {boolean}
     * @memberof ProductCreateProductRequest
     */
    'isConfigurable'?: boolean;
    /**
     * Contains a list of attributes specific to the product variants.
     * @type {Array<string>}
     * @memberof ProductCreateProductRequest
     */
    'variantAttributes'?: Array<string>;
    /**
     * Indicates whether the product is virtual or not.
     * @type {boolean}
     * @memberof ProductCreateProductRequest
     */
    'isVirtual'?: boolean;
    /**
     * Specifies whether the product is a gift card or not.
     * @type {boolean}
     * @memberof ProductCreateProductRequest
     */
    'isGiftcard'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ProductCreateProductRequest
     */
    'hasConfigurator'?: boolean;
    /**
     * 
     * @type {ProductLocalizedText}
     * @memberof ProductCreateProductRequest
     */
    'urlKey'?: ProductLocalizedText;
    /**
     * Specifies the maximum quantity that can be sold for the product in each order.
     * @type {number}
     * @memberof ProductCreateProductRequest
     */
    'maxSaleableQuantity'?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductCreateProductRequest
     */
    'mediaVariantAttributes'?: Array<string>;
    /**
     * Contains a map of additional attributes associated with the product, where the key is the attribute name and the value is any type of value.
     * @type {{ [key: string]: ProtobufAny; }}
     * @memberof ProductCreateProductRequest
     */
    'attributes'?: { [key: string]: ProtobufAny; };
    /**
     * Represents a map of product variants associated with the product, where the key is the variant ID or code, and the value is a ProductVariant message.
     * @type {{ [key: string]: ProductProductVariant; }}
     * @memberof ProductCreateProductRequest
     */
    'variants'?: { [key: string]: ProductProductVariant; };
}
/**
 * 
 * @export
 * @interface ProductCreateProductRequestV2
 */
export interface ProductCreateProductRequestV2 {
    /**
     * 
     * @type {string}
     * @memberof ProductCreateProductRequestV2
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductCreateProductRequestV2
     */
    'entityType'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductCreateProductRequestV2
     */
    'entityCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductCreateProductRequestV2
     */
    'code'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ProductCreateProductRequestV2
     */
    'isConfigurable'?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductCreateProductRequestV2
     */
    'variantAttributes'?: Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof ProductCreateProductRequestV2
     */
    'isVirtual'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ProductCreateProductRequestV2
     */
    'isGiftcard'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ProductCreateProductRequestV2
     */
    'hasConfigurator'?: boolean;
    /**
     * 
     * @type {ProductLocalizedText}
     * @memberof ProductCreateProductRequestV2
     */
    'urlKey'?: ProductLocalizedText;
    /**
     * 
     * @type {number}
     * @memberof ProductCreateProductRequestV2
     */
    'maxSaleableQuantity'?: number;
    /**
     * 
     * @type {{ [key: string]: ProtobufAny; }}
     * @memberof ProductCreateProductRequestV2
     */
    'attributes'?: { [key: string]: ProtobufAny; };
    /**
     * 
     * @type {{ [key: string]: ProductProductVariant; }}
     * @memberof ProductCreateProductRequestV2
     */
    'variants'?: { [key: string]: ProductProductVariant; };
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductCreateProductRequestV2
     */
    'mediaVariantAttributes'?: Array<string>;
}
/**
 * The CreateProductResponse message is used to provide a response after creating a product within the system. It includes fields that indicate the success of the product creation and any errors encountered during the process.
 * @export
 * @interface ProductCreateProductResponse
 */
export interface ProductCreateProductResponse {
    /**
     * Indicates whether the product creation was successful or not.
     * @type {boolean}
     * @memberof ProductCreateProductResponse
     */
    'success'?: boolean;
    /**
     * Represents the ID of the created product.
     * @type {string}
     * @memberof ProductCreateProductResponse
     */
    'id'?: string;
    /**
     * Contains a list of ProductResponseError messages, indicating any errors related to the product creation.
     * @type {Array<ProductProductResponseError>}
     * @memberof ProductCreateProductResponse
     */
    'productErrors'?: Array<ProductProductResponseError>;
    /**
     * Contains a list of AttributeResponseError messages, indicating any errors related to the attributes of the product.
     * @type {Array<ProductAttributeResponseError>}
     * @memberof ProductCreateProductResponse
     */
    'attributeErrors'?: Array<ProductAttributeResponseError>;
}
/**
 * 
 * @export
 * @interface ProductCreateProductResponseV2
 */
export interface ProductCreateProductResponseV2 {
    /**
     * 
     * @type {string}
     * @memberof ProductCreateProductResponseV2
     */
    'id'?: string;
}
/**
 * 
 * @export
 * @interface ProductDeleteProductRequest
 */
export interface ProductDeleteProductRequest {
    /**
     * 
     * @type {string}
     * @memberof ProductDeleteProductRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductDeleteProductRequest
     */
    'id'?: string;
}
/**
 * 
 * @export
 * @interface ProductDeleteRequest
 */
export interface ProductDeleteRequest {
    /**
     * 
     * @type {ProductProductEntity}
     * @memberof ProductDeleteRequest
     */
    'product'?: ProductProductEntity;
}
/**
 * 
 * @export
 * @interface ProductDeleteResponse
 */
export interface ProductDeleteResponse {
    /**
     * 
     * @type {boolean}
     * @memberof ProductDeleteResponse
     */
    'success'?: boolean;
}
/**
 * 
 * @export
 * @interface ProductFieldMask
 */
export interface ProductFieldMask {
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductFieldMask
     */
    'paths'?: Array<string>;
}
/**
 * 
 * @export
 * @interface ProductGetProductByCodeRequest
 */
export interface ProductGetProductByCodeRequest {
    /**
     * 
     * @type {string}
     * @memberof ProductGetProductByCodeRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductGetProductByCodeRequest
     */
    'code'?: string;
}
/**
 * 
 * @export
 * @interface ProductGetProductByCodeResponse
 */
export interface ProductGetProductByCodeResponse {
    /**
     * 
     * @type {ProductProductEntity}
     * @memberof ProductGetProductByCodeResponse
     */
    'product'?: ProductProductEntity;
}
/**
 * 
 * @export
 * @interface ProductGetProductByUrlKeyRequest
 */
export interface ProductGetProductByUrlKeyRequest {
    /**
     * 
     * @type {string}
     * @memberof ProductGetProductByUrlKeyRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductGetProductByUrlKeyRequest
     */
    'urlKey'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductGetProductByUrlKeyRequest
     */
    'locale'?: string;
}
/**
 * 
 * @export
 * @interface ProductGetProductByUrlKeyResponse
 */
export interface ProductGetProductByUrlKeyResponse {
    /**
     * 
     * @type {ProductProductEntity}
     * @memberof ProductGetProductByUrlKeyResponse
     */
    'product'?: ProductProductEntity;
}
/**
 * 
 * @export
 * @interface ProductGetProductRequest
 */
export interface ProductGetProductRequest {
    /**
     * 
     * @type {string}
     * @memberof ProductGetProductRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductGetProductRequest
     */
    'id'?: string;
}
/**
 * 
 * @export
 * @interface ProductGetProductResponse
 */
export interface ProductGetProductResponse {
    /**
     * 
     * @type {ProductProductEntity}
     * @memberof ProductGetProductResponse
     */
    'product'?: ProductProductEntity;
}
/**
 * 
 * @export
 * @interface ProductListProductsByIdsRequest
 */
export interface ProductListProductsByIdsRequest {
    /**
     * 
     * @type {string}
     * @memberof ProductListProductsByIdsRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductListProductsByIdsRequest
     */
    'ids'?: Array<string>;
}
/**
 * 
 * @export
 * @interface ProductListProductsByIdsResponse
 */
export interface ProductListProductsByIdsResponse {
    /**
     * 
     * @type {Array<ProductProductEntity>}
     * @memberof ProductListProductsByIdsResponse
     */
    'products'?: Array<ProductProductEntity>;
}
/**
 * 
 * @export
 * @interface ProductListProductsBySkuRequest
 */
export interface ProductListProductsBySkuRequest {
    /**
     * 
     * @type {string}
     * @memberof ProductListProductsBySkuRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductListProductsBySkuRequest
     */
    'sku'?: string;
}
/**
 * 
 * @export
 * @interface ProductListProductsBySkuResponse
 */
export interface ProductListProductsBySkuResponse {
    /**
     * 
     * @type {Array<ProductProductEntity>}
     * @memberof ProductListProductsBySkuResponse
     */
    'products'?: Array<ProductProductEntity>;
}
/**
 * 
 * @export
 * @interface ProductListProductsRequest
 */
export interface ProductListProductsRequest {
    /**
     * 
     * @type {string}
     * @memberof ProductListProductsRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductListProductsRequest
     */
    'pageSize'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductListProductsRequest
     */
    'pageToken'?: string;
    /**
     * 
     * @type {ListProductsRequestFilter}
     * @memberof ProductListProductsRequest
     */
    'filter'?: ListProductsRequestFilter;
    /**
     * 
     * @type {string}
     * @memberof ProductListProductsRequest
     */
    'filterMask'?: string;
}
/**
 * 
 * @export
 * @interface ProductListProductsResponse
 */
export interface ProductListProductsResponse {
    /**
     * 
     * @type {Array<ProductProductEntity>}
     * @memberof ProductListProductsResponse
     */
    'products'?: Array<ProductProductEntity>;
    /**
     * 
     * @type {string}
     * @memberof ProductListProductsResponse
     */
    'nextPageToken'?: string;
}
/**
 * 
 * @export
 * @interface ProductListVariantsBySkuRequest
 */
export interface ProductListVariantsBySkuRequest {
    /**
     * 
     * @type {string}
     * @memberof ProductListVariantsBySkuRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductListVariantsBySkuRequest
     */
    'sku'?: string;
}
/**
 * 
 * @export
 * @interface ProductListVariantsBySkuResponse
 */
export interface ProductListVariantsBySkuResponse {
    /**
     * 
     * @type {Array<ProductProductVariant>}
     * @memberof ProductListVariantsBySkuResponse
     */
    'variants'?: Array<ProductProductVariant>;
}
/**
 * 
 * @export
 * @interface ProductLocalizedAsset
 */
export interface ProductLocalizedAsset {
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof ProductLocalizedAsset
     */
    'value'?: { [key: string]: string; };
}
/**
 * 
 * @export
 * @interface ProductLocalizedText
 */
export interface ProductLocalizedText {
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof ProductLocalizedText
     */
    'value'?: { [key: string]: string; };
}
/**
 * 
 * @export
 * @interface ProductMediaGallery
 */
export interface ProductMediaGallery {
    /**
     * 
     * @type {Array<ProductMediaGalleryEntry>}
     * @memberof ProductMediaGallery
     */
    'entries'?: Array<ProductMediaGalleryEntry>;
}
/**
 * 
 * @export
 * @interface ProductMediaGalleryEntry
 */
export interface ProductMediaGalleryEntry {
    /**
     * 
     * @type {string}
     * @memberof ProductMediaGalleryEntry
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductMediaGalleryEntry
     */
    'assetGrn'?: string;
    /**
     * 
     * @type {number}
     * @memberof ProductMediaGalleryEntry
     */
    'position'?: number;
    /**
     * 
     * @type {Array<ProductMediaGalleryEntryMetadata>}
     * @memberof ProductMediaGalleryEntry
     */
    'metadata'?: Array<ProductMediaGalleryEntryMetadata>;
}
/**
 * 
 * @export
 * @interface ProductMediaGalleryEntryMetadata
 */
export interface ProductMediaGalleryEntryMetadata {
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductMediaGalleryEntryMetadata
     */
    'roles'?: Array<string>;
    /**
     * 
     * @type {ProductLocalizedText}
     * @memberof ProductMediaGalleryEntryMetadata
     */
    'alt'?: ProductLocalizedText;
}
/**
 * 
 * @export
 * @interface ProductProductEntity
 */
export interface ProductProductEntity {
    /**
     * 
     * @type {string}
     * @memberof ProductProductEntity
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductProductEntity
     */
    'grn'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductProductEntity
     */
    'entityType'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductProductEntity
     */
    'entityCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductProductEntity
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductProductEntity
     */
    'code'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductProductEntity
     */
    'variantAttributes'?: Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof ProductProductEntity
     */
    'isConfigurable'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ProductProductEntity
     */
    'isVirtual'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ProductProductEntity
     */
    'isGiftcard'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ProductProductEntity
     */
    'hasConfigurator'?: boolean;
    /**
     * 
     * @type {ProductLocalizedText}
     * @memberof ProductProductEntity
     */
    'urlKey'?: ProductLocalizedText;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductProductEntity
     */
    'mediaVariantAttributes'?: Array<string>;
    /**
     * 
     * @type {{ [key: string]: ProtobufAny; }}
     * @memberof ProductProductEntity
     */
    'attributes'?: { [key: string]: ProtobufAny; };
    /**
     * 
     * @type {{ [key: string]: ProductProductVariant; }}
     * @memberof ProductProductEntity
     */
    'variants'?: { [key: string]: ProductProductVariant; };
    /**
     * 
     * @type {ProductMediaGallery}
     * @memberof ProductProductEntity
     */
    'mediaGallery'?: ProductMediaGallery;
    /**
     * 
     * @type {number}
     * @memberof ProductProductEntity
     */
    'maxSaleableQuantity'?: number;
    /**
     * 
     * @type {ProductAssets}
     * @memberof ProductProductEntity
     */
    'assets'?: ProductAssets;
    /**
     * 
     * @type {string}
     * @memberof ProductProductEntity
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductProductEntity
     */
    'updatedAt'?: string;
}
/**
 * 
 * @export
 * @interface ProductProductResponseError
 */
export interface ProductProductResponseError {
    /**
     * 
     * @type {string}
     * @memberof ProductProductResponseError
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductProductResponseError
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface ProductProductVariant
 */
export interface ProductProductVariant {
    /**
     * 
     * @type {string}
     * @memberof ProductProductVariant
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductProductVariant
     */
    'grn'?: string;
    /**
     * 
     * @type {number}
     * @memberof ProductProductVariant
     */
    'maxSaleableQuantity'?: number;
    /**
     * 
     * @type {{ [key: string]: ProtobufAny; }}
     * @memberof ProductProductVariant
     */
    'attributes'?: { [key: string]: ProtobufAny; };
}
/**
 * 
 * @export
 * @interface ProductRemoveMediaGalleryEntryRequest
 */
export interface ProductRemoveMediaGalleryEntryRequest {
    /**
     * 
     * @type {string}
     * @memberof ProductRemoveMediaGalleryEntryRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductRemoveMediaGalleryEntryRequest
     */
    'productId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductRemoveMediaGalleryEntryRequest
     */
    'id'?: string;
}
/**
 * 
 * @export
 * @interface ProductUpdateAssetEntryPayload
 */
export interface ProductUpdateAssetEntryPayload {
    /**
     * 
     * @type {string}
     * @memberof ProductUpdateAssetEntryPayload
     */
    'assetGrn'?: string;
    /**
     * 
     * @type {ProductLocalizedAsset}
     * @memberof ProductUpdateAssetEntryPayload
     */
    'localizedAssetGrn'?: ProductLocalizedAsset;
    /**
     * 
     * @type {number}
     * @memberof ProductUpdateAssetEntryPayload
     */
    'position'?: number;
    /**
     * 
     * @type {Array<ProductAssetsEntryMetadata>}
     * @memberof ProductUpdateAssetEntryPayload
     */
    'metadata'?: Array<ProductAssetsEntryMetadata>;
}
/**
 * 
 * @export
 * @interface ProductUpdateMediaGalleryEntryRequest
 */
export interface ProductUpdateMediaGalleryEntryRequest {
    /**
     * 
     * @type {string}
     * @memberof ProductUpdateMediaGalleryEntryRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductUpdateMediaGalleryEntryRequest
     */
    'productId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductUpdateMediaGalleryEntryRequest
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductUpdateMediaGalleryEntryRequest
     */
    'assetGrn'?: string;
    /**
     * 
     * @type {number}
     * @memberof ProductUpdateMediaGalleryEntryRequest
     */
    'position'?: number;
    /**
     * 
     * @type {Array<ProductMediaGalleryEntryMetadata>}
     * @memberof ProductUpdateMediaGalleryEntryRequest
     */
    'metadata'?: Array<ProductMediaGalleryEntryMetadata>;
}
/**
 * 
 * @export
 * @interface ProductUpdateProductRequest
 */
export interface ProductUpdateProductRequest {
    /**
     * 
     * @type {string}
     * @memberof ProductUpdateProductRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductUpdateProductRequest
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductUpdateProductRequest
     */
    'code'?: string;
    /**
     * 
     * @type {ProductFieldMask}
     * @memberof ProductUpdateProductRequest
     */
    'attributesMask'?: ProductFieldMask;
    /**
     * 
     * @type {ProductLocalizedText}
     * @memberof ProductUpdateProductRequest
     */
    'urlKey'?: ProductLocalizedText;
    /**
     * 
     * @type {number}
     * @memberof ProductUpdateProductRequest
     */
    'maxSaleableQuantity'?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductUpdateProductRequest
     */
    'mediaVariantAttributes'?: Array<string>;
    /**
     * 
     * @type {{ [key: string]: ProtobufAny; }}
     * @memberof ProductUpdateProductRequest
     */
    'attributes'?: { [key: string]: ProtobufAny; };
    /**
     * 
     * @type {{ [key: string]: ProductProductVariant; }}
     * @memberof ProductUpdateProductRequest
     */
    'variants'?: { [key: string]: ProductProductVariant; };
}
/**
 * 
 * @export
 * @interface ProductUpdateProductRequestV2
 */
export interface ProductUpdateProductRequestV2 {
    /**
     * 
     * @type {string}
     * @memberof ProductUpdateProductRequestV2
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductUpdateProductRequestV2
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductUpdateProductRequestV2
     */
    'code'?: string;
    /**
     * 
     * @type {ProductFieldMask}
     * @memberof ProductUpdateProductRequestV2
     */
    'attributesMask'?: ProductFieldMask;
    /**
     * 
     * @type {ProductLocalizedText}
     * @memberof ProductUpdateProductRequestV2
     */
    'urlKey'?: ProductLocalizedText;
    /**
     * 
     * @type {number}
     * @memberof ProductUpdateProductRequestV2
     */
    'maxSaleableQuantity'?: number;
    /**
     * 
     * @type {{ [key: string]: ProtobufAny; }}
     * @memberof ProductUpdateProductRequestV2
     */
    'attributes'?: { [key: string]: ProtobufAny; };
    /**
     * 
     * @type {{ [key: string]: ProductProductVariant; }}
     * @memberof ProductUpdateProductRequestV2
     */
    'variants'?: { [key: string]: ProductProductVariant; };
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductUpdateProductRequestV2
     */
    'mediaVariantAttributes'?: Array<string>;
}
/**
 * 
 * @export
 * @interface ProductUpdateProductResponse
 */
export interface ProductUpdateProductResponse {
    /**
     * 
     * @type {boolean}
     * @memberof ProductUpdateProductResponse
     */
    'success'?: boolean;
    /**
     * 
     * @type {Array<ProductProductResponseError>}
     * @memberof ProductUpdateProductResponse
     */
    'productErrors'?: Array<ProductProductResponseError>;
    /**
     * 
     * @type {Array<ProductAttributeResponseError>}
     * @memberof ProductUpdateProductResponse
     */
    'attributeErrors'?: Array<ProductAttributeResponseError>;
}
/**
 * 
 * @export
 * @interface ProductentitymanagerLocalizedText
 */
export interface ProductentitymanagerLocalizedText {
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof ProductentitymanagerLocalizedText
     */
    'value'?: { [key: string]: string; };
}
/**
 * `Any` contains an arbitrary serialized protocol buffer message along with a URL that describes the type of the serialized message.  Protobuf library provides support to pack/unpack Any values in the form of utility functions or additional generated methods of the Any type.  Example 1: Pack and unpack a message in C++.      Foo foo = ...;     Any any;     any.PackFrom(foo);     ...     if (any.UnpackTo(&foo)) {       ...     }  Example 2: Pack and unpack a message in Java.      Foo foo = ...;     Any any = Any.pack(foo);     ...     if (any.is(Foo.class)) {       foo = any.unpack(Foo.class);     }  Example 3: Pack and unpack a message in Python.      foo = Foo(...)     any = Any()     any.Pack(foo)     ...     if any.Is(Foo.DESCRIPTOR):       any.Unpack(foo)       ...  Example 4: Pack and unpack a message in Go       foo := &pb.Foo{...}      any, err := anypb.New(foo)      if err != nil {        ...      }      ...      foo := &pb.Foo{}      if err := any.UnmarshalTo(foo); err != nil {        ...      }  The pack methods provided by protobuf library will by default use \'type.googleapis.com/full.type.name\' as the type URL and the unpack methods only use the fully qualified type name after the last \'/\' in the type URL, for example \"foo.bar.com/x/y.z\" will yield type name \"y.z\".   JSON  The JSON representation of an `Any` value uses the regular representation of the deserialized, embedded message, with an additional field `@type` which contains the type URL. Example:      package google.profile;     message Person {       string first_name = 1;       string last_name = 2;     }      {       \"@type\": \"type.googleapis.com/google.profile.Person\",       \"firstName\": <string>,       \"lastName\": <string>     }  If the embedded message type is well-known and has a custom JSON representation, that representation will be embedded adding a field `value` which holds the custom JSON in addition to the `@type` field. Example (for message [google.protobuf.Duration][]):      {       \"@type\": \"type.googleapis.com/google.protobuf.Duration\",       \"value\": \"1.212s\"     }
 * @export
 * @interface ProtobufAny
 */
export interface ProtobufAny {
    [key: string]: any;

    /**
     * A URL/resource name that uniquely identifies the type of the serialized protocol buffer message. This string must contain at least one \"/\" character. The last segment of the URL\'s path must represent the fully qualified name of the type (as in `path/google.protobuf.Duration`). The name should be in a canonical form (e.g., leading \".\" is not accepted).  In practice, teams usually precompile into the binary all types that they expect it to use in the context of Any. However, for URLs which use the scheme `http`, `https`, or no scheme, one can optionally set up a type server that maps type URLs to message definitions as follows:  * If no scheme is provided, `https` is assumed. * An HTTP GET on the URL must yield a [google.protobuf.Type][]   value in binary format, or produce an error. * Applications are allowed to cache lookup results based on the   URL, or have them precompiled into a binary to avoid any   lookup. Therefore, binary compatibility needs to be preserved   on changes to types. (Use versioned type names to manage   breaking changes.)  Note: this functionality is not currently available in the official protobuf release, and it is not used for type URLs beginning with type.googleapis.com.  Schemes other than `http`, `https` (or the empty scheme) might be used with implementation specific semantics.
     * @type {string}
     * @memberof ProtobufAny
     */
    '@type'?: string;
}
/**
 * 
 * @export
 * @interface RpcStatus
 */
export interface RpcStatus {
    /**
     * 
     * @type {number}
     * @memberof RpcStatus
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof RpcStatus
     */
    'message'?: string;
    /**
     * 
     * @type {Array<ProtobufAny>}
     * @memberof RpcStatus
     */
    'details'?: Array<ProtobufAny>;
}

/**
 * ProductApi - axios parameter creator
 * @export
 */
export const ProductApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * The AddMediaGalleryEntry endpoint allows users to add a new media entry to the gallery of a specific product. To make a request to this endpoint, users need to provide the necessary information in the specified format. The request includes the tenant_id to specify the relevant tenant, the product_id to identify the target product, and the asset_grn which represents the globally unique identifier for the media asset being added. Additionally, the position field indicates the desired position of the media entry within the gallery, allowing users to control the order in which the media items are displayed. The metadata field, which is a repeated field, provides the option to include additional metadata associated with the media entry.
         * @summary Add Media Gallery Entry
         * @param {ProductAddMediaGalleryEntryRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMediaGalleryEntry: async (body: ProductAddMediaGalleryEntryRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('addMediaGalleryEntry', 'body', body)
            const localVarPath = `/product.Product/AddMediaGalleryEntry`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Version 2 of bulk updates for product attributes with enhanced payload structure and response format.
         * @summary Bulk Update Products
         * @param {ProductBulkUpdateRequestV2} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkUpdateV2: async (body: ProductBulkUpdateRequestV2, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('bulkUpdateV2', 'body', body)
            const localVarPath = `/product.Product/BulkUpdateV2`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create attribute options with specified codes, values, and swatches. Returns created options and any associated errors.
         * @summary Create Attribute Options
         * @param {EntitymanagerCreateAttributeOptionsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAttributeOptions: async (body: EntitymanagerCreateAttributeOptionsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('createAttributeOptions', 'body', body)
            const localVarPath = `/product.Product/CreateAttributeOptions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The CreateEntity endpoint allows users to define and create a new entity with custom attributes, providing a flexible way to represent and manage different data structures within the system. By making a request to this endpoint, users can create a new entity that serves as an abstraction of a product or any other domain-specific object. This endpoint empowers users to define the specific attributes that compose the entity, such as color, composition, technical details, or any other relevant properties. Utilize the CreateEntity endpoint to dynamically extend and adapt your system\'s data model to accommodate diverse business requirements and efficiently manage various types of entities.
         * @summary Create Entity
         * @param {EntitymanagerEntity} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntity: async (body: EntitymanagerEntity, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('createEntity', 'body', body)
            const localVarPath = `/product.Product/CreateEntity`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The CreateOptionsList endpoint allows users to create an OptionList, which represents a list of predefined options for assigning to an attribute. By making a request to this endpoint with the provided request format, users can create a new OptionList by specifying the relevant tenant ID and providing the OptionList object containing the predefined options. This functionality facilitates efficient management and assignment of predefined attribute values, ensuring consistency and flexibility within the system.
         * @summary Create Options List
         * @param {EntitymanagerCreateOptionsListRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOptionsList: async (body: EntitymanagerCreateOptionsListRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('createOptionsList', 'body', body)
            const localVarPath = `/product.Product/CreateOptionsList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve attribute option details by providing the tenant ID, list code, and option ID. Returns the specified attribute option.
         * @summary Get Attribute Option
         * @param {EntitymanagerGetAttributeOptionRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttributeOption: async (body: EntitymanagerGetAttributeOptionRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('getAttributeOption', 'body', body)
            const localVarPath = `/product.Product/GetAttributeOption`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a list of attribute options based on the provided tenant ID and list code.
         * @summary Get Attribute Options
         * @param {EntitymanagerGetAttributeOptionsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttributeOptions: async (body: EntitymanagerGetAttributeOptionsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('getAttributeOptions', 'body', body)
            const localVarPath = `/product.Product/GetAttributeOptions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve details of an entity by providing the tenant ID and either entity data or entity ID. Returns information including ID, type, code, label, relationships, and attributes.
         * @summary Get Entity Details
         * @param {EntitymanagerEntityRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntity: async (body: EntitymanagerEntityRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('getEntity', 'body', body)
            const localVarPath = `/product.Product/GetEntity`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve option lists.
         * @summary Get Options List
         * @param {EntitymanagerGetOptionsListRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOptionsList: async (body: EntitymanagerGetOptionsListRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('getOptionsList', 'body', body)
            const localVarPath = `/product.Product/GetOptionsList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The GetProduct endpoint enables users to retrieve a product from the system. By sending a request to this endpoint, users can retrieve a product by providing its unique identifier.
         * @summary Get Product
         * @param {ProductGetProductRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProduct: async (body: ProductGetProductRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('getProduct', 'body', body)
            const localVarPath = `/product.Product/GetProduct`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The GetProductByCode endpoint enables users to retrieve a product from the system. By sending a request to this endpoint, users can retrieve a product by providing its unique code.
         * @summary Get Product By Code
         * @param {ProductGetProductByCodeRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductByCode: async (body: ProductGetProductByCodeRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('getProductByCode', 'body', body)
            const localVarPath = `/product.Product/GetProductByCode`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The GetProductByUrlKey endpoint enables users to retrieve a product from the system. By sending a request to this endpoint, users can retrieve a product by providing its unique url key.
         * @summary Get Product By Url Key
         * @param {ProductGetProductByUrlKeyRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductByUrlKey: async (body: ProductGetProductByUrlKeyRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('getProductByUrlKey', 'body', body)
            const localVarPath = `/product.Product/GetProductByUrlKey`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List Attribute Options
         * @param {EntitymanagerListAttributeOptionsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAttributeOptions: async (body: EntitymanagerListAttributeOptionsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('listAttributeOptions', 'body', body)
            const localVarPath = `/product.Product/ListAttributeOptions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List Entities
         * @param {EntitymanagerListEntitiesRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEntities: async (body: EntitymanagerListEntitiesRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('listEntities', 'body', body)
            const localVarPath = `/product.Product/ListEntities`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The ListOptionsLists endpoint allows users to retrieve a list of OptionLists available in the system. By making a request to this endpoint with the provided request format, users can obtain all the OptionLists associated with the specified tenant. This functionality enables users to access and manage the predefined options available for various attributes within the system. Utilizing the ListOptionsLists endpoint provides a convenient way to retrieve and work with OptionLists, facilitating efficient management of attribute options and ensuring consistency in attribute values throughout the system.
         * @summary List Options Lists
         * @param {EntitymanagerListOptionsListsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOptionsLists: async (body: EntitymanagerListOptionsListsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('listOptionsLists', 'body', body)
            const localVarPath = `/product.Product/ListOptionsLists`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The ListProducts endpoint provides users with the ability to retrieve a filtered list of products based on specific criteria. By including filter parameters in the request, users can customize the response to only include products that meet certain conditions, such as price range, category, availability, or any other relevant attributes. This endpoint empowers users to efficiently narrow down the product selection and retrieve tailored results.
         * @summary List Products
         * @param {ProductListProductsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProducts: async (body: ProductListProductsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('listProducts', 'body', body)
            const localVarPath = `/product.Product/ListProducts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The ListProductsByIds endpoint allows users to retrieve a list of products based on provided IDs. By making a request to this endpoint and specifying a set of product IDs, users can retrieve detailed information about the corresponding products. This endpoint facilitates efficient retrieval of specific products, enabling applications to display accurate and targeted product information to users.
         * @summary List Products By Ids
         * @param {ProductListProductsByIdsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProductsByIds: async (body: ProductListProductsByIdsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('listProductsByIds', 'body', body)
            const localVarPath = `/product.Product/ListProductsByIds`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List Products By Sku
         * @param {ProductListProductsBySkuRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProductsBySku: async (body: ProductListProductsBySkuRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('listProductsBySku', 'body', body)
            const localVarPath = `/product.Product/ListProductsBySku`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List Product Variants By Sku
         * @param {ProductListVariantsBySkuRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVariantsBySku: async (body: ProductListVariantsBySkuRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('listVariantsBySku', 'body', body)
            const localVarPath = `/product.Product/ListVariantsBySku`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Assets endpoints
         * @param {ProductBulkAddAssetsEntriesRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productBulkAddAssetsEntries: async (body: ProductBulkAddAssetsEntriesRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('productBulkAddAssetsEntries', 'body', body)
            const localVarPath = `/product.Product/BulkAddAssetsEntries`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Allow creation of multiple attributes. If any attribute is invalid, an error will be returned with more details, and in the response body, the attributes created will be returned.
         * @param {EntitymanagerBulkCreateAttributeRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productBulkCreateAttribute: async (body: EntitymanagerBulkCreateAttributeRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('productBulkCreateAttribute', 'body', body)
            const localVarPath = `/product.Product/BulkCreateAttribute`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ProductBulkDeleteProductsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productBulkDeleteProducts: async (body: ProductBulkDeleteProductsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('productBulkDeleteProducts', 'body', body)
            const localVarPath = `/product.Product/BulkDeleteProducts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ProductBulkRemoveAssetsEntriesRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productBulkRemoveAssetsEntries: async (body: ProductBulkRemoveAssetsEntriesRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('productBulkRemoveAssetsEntries', 'body', body)
            const localVarPath = `/product.Product/BulkRemoveAssetsEntries`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ProductBulkUpdateRequest} body 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        productBulkUpdate: async (body: ProductBulkUpdateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('productBulkUpdate', 'body', body)
            const localVarPath = `/product.Product/BulkUpdate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ProductBulkUpdateAssetsEntriesRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productBulkUpdateAssetsEntries: async (body: ProductBulkUpdateAssetsEntriesRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('productBulkUpdateAssetsEntries', 'body', body)
            const localVarPath = `/product.Product/BulkUpdateAssetsEntries`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {EntitymanagerCreateAttributeGroupRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productCreateAttributeGroup: async (body: EntitymanagerCreateAttributeGroupRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('productCreateAttributeGroup', 'body', body)
            const localVarPath = `/product.Product/CreateAttributeGroup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ProductCreateProductRequest} body The CreateProductRequest message is used to create a new product within the system. It contains various fields that allow specifying the details and attributes of the product.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        productCreateProduct: async (body: ProductCreateProductRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('productCreateProduct', 'body', body)
            const localVarPath = `/product.Product/CreateProduct`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ProductCreateProductRequestV2} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productCreateProductV2: async (body: ProductCreateProductRequestV2, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('productCreateProductV2', 'body', body)
            const localVarPath = `/product.Product/CreateProductV2`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ProductDeleteRequest} body 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        productDelete: async (body: ProductDeleteRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('productDelete', 'body', body)
            const localVarPath = `/product.Product/Delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {EntitymanagerDeleteAttributeRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productDeleteAttribute: async (body: EntitymanagerDeleteAttributeRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('productDeleteAttribute', 'body', body)
            const localVarPath = `/product.Product/DeleteAttribute`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ProductDeleteProductRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productDeleteProduct: async (body: ProductDeleteProductRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('productDeleteProduct', 'body', body)
            const localVarPath = `/product.Product/DeleteProduct`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {EntitymanagerGetAttributeGroupRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productGetAttributeGroup: async (body: EntitymanagerGetAttributeGroupRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('productGetAttributeGroup', 'body', body)
            const localVarPath = `/product.Product/GetAttributeGroup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Attribute Groups endpoints
         * @param {EntitymanagerListAttributeGroupsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productListAttributeGroups: async (body: EntitymanagerListAttributeGroupsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('productListAttributeGroups', 'body', body)
            const localVarPath = `/product.Product/ListAttributeGroups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {EntitymanagerUpdateAttributeRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productUpdateAttribute: async (body: EntitymanagerUpdateAttributeRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('productUpdateAttribute', 'body', body)
            const localVarPath = `/product.Product/UpdateAttribute`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {EntitymanagerUpdateAttributeGroupRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productUpdateAttributeGroup: async (body: EntitymanagerUpdateAttributeGroupRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('productUpdateAttributeGroup', 'body', body)
            const localVarPath = `/product.Product/UpdateAttributeGroup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ProductUpdateProductRequest} body 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        productUpdateProduct: async (body: ProductUpdateProductRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('productUpdateProduct', 'body', body)
            const localVarPath = `/product.Product/UpdateProduct`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ProductUpdateProductRequestV2} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productUpdateProductV2: async (body: ProductUpdateProductRequestV2, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('productUpdateProductV2', 'body', body)
            const localVarPath = `/product.Product/UpdateProductV2`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The RemoveMediaGalleryEntry endpoint allows users to remove a specific media entry from a product\'s gallery. By making a request to this endpoint and providing the tenant ID, product ID, and the unique identifier of the media entry, users can easily manage and update the visual content of a product\'s gallery. 
         * @summary Remove Media Gallery Entry
         * @param {ProductRemoveMediaGalleryEntryRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeMediaGalleryEntry: async (body: ProductRemoveMediaGalleryEntryRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('removeMediaGalleryEntry', 'body', body)
            const localVarPath = `/product.Product/RemoveMediaGalleryEntry`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Attribute Options
         * @param {EntitymanagerUpdateAttributeOptionsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAttributeOptions: async (body: EntitymanagerUpdateAttributeOptionsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('updateAttributeOptions', 'body', body)
            const localVarPath = `/product.Product/UpdateAttributeOptions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The UpdateMediaGalleryEntry endpoint allows users to modify and update a specific media entry within a product\'s gallery. By sending a request to this endpoint and providing the necessary information, users can efficiently update the media asset, position, and metadata associated with the entry.
         * @summary Update Media Gallery Entry
         * @param {ProductUpdateMediaGalleryEntryRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMediaGalleryEntry: async (body: ProductUpdateMediaGalleryEntryRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('updateMediaGalleryEntry', 'body', body)
            const localVarPath = `/product.Product/UpdateMediaGalleryEntry`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Options List
         * @param {EntitymanagerUpdateOptionsListRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOptionsList: async (body: EntitymanagerUpdateOptionsListRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('updateOptionsList', 'body', body)
            const localVarPath = `/product.Product/UpdateOptionsList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductApi - functional programming interface
 * @export
 */
export const ProductApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductApiAxiosParamCreator(configuration)
    return {
        /**
         * The AddMediaGalleryEntry endpoint allows users to add a new media entry to the gallery of a specific product. To make a request to this endpoint, users need to provide the necessary information in the specified format. The request includes the tenant_id to specify the relevant tenant, the product_id to identify the target product, and the asset_grn which represents the globally unique identifier for the media asset being added. Additionally, the position field indicates the desired position of the media entry within the gallery, allowing users to control the order in which the media items are displayed. The metadata field, which is a repeated field, provides the option to include additional metadata associated with the media entry.
         * @summary Add Media Gallery Entry
         * @param {ProductAddMediaGalleryEntryRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addMediaGalleryEntry(body: ProductAddMediaGalleryEntryRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductAddMediaGalleryEntryResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addMediaGalleryEntry(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProductApi.addMediaGalleryEntry']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Version 2 of bulk updates for product attributes with enhanced payload structure and response format.
         * @summary Bulk Update Products
         * @param {ProductBulkUpdateRequestV2} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bulkUpdateV2(body: ProductBulkUpdateRequestV2, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductBulkUpdateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bulkUpdateV2(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProductApi.bulkUpdateV2']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Create attribute options with specified codes, values, and swatches. Returns created options and any associated errors.
         * @summary Create Attribute Options
         * @param {EntitymanagerCreateAttributeOptionsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAttributeOptions(body: EntitymanagerCreateAttributeOptionsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntitymanagerCreateAttributeOptionsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAttributeOptions(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProductApi.createAttributeOptions']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * The CreateEntity endpoint allows users to define and create a new entity with custom attributes, providing a flexible way to represent and manage different data structures within the system. By making a request to this endpoint, users can create a new entity that serves as an abstraction of a product or any other domain-specific object. This endpoint empowers users to define the specific attributes that compose the entity, such as color, composition, technical details, or any other relevant properties. Utilize the CreateEntity endpoint to dynamically extend and adapt your system\'s data model to accommodate diverse business requirements and efficiently manage various types of entities.
         * @summary Create Entity
         * @param {EntitymanagerEntity} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createEntity(body: EntitymanagerEntity, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntitymanagerCreateEntityResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createEntity(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProductApi.createEntity']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * The CreateOptionsList endpoint allows users to create an OptionList, which represents a list of predefined options for assigning to an attribute. By making a request to this endpoint with the provided request format, users can create a new OptionList by specifying the relevant tenant ID and providing the OptionList object containing the predefined options. This functionality facilitates efficient management and assignment of predefined attribute values, ensuring consistency and flexibility within the system.
         * @summary Create Options List
         * @param {EntitymanagerCreateOptionsListRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createOptionsList(body: EntitymanagerCreateOptionsListRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntitymanagerCreateOptionsListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createOptionsList(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProductApi.createOptionsList']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Retrieve attribute option details by providing the tenant ID, list code, and option ID. Returns the specified attribute option.
         * @summary Get Attribute Option
         * @param {EntitymanagerGetAttributeOptionRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAttributeOption(body: EntitymanagerGetAttributeOptionRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntitymanagerGetAttributeOptionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAttributeOption(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProductApi.getAttributeOption']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Retrieve a list of attribute options based on the provided tenant ID and list code.
         * @summary Get Attribute Options
         * @param {EntitymanagerGetAttributeOptionsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAttributeOptions(body: EntitymanagerGetAttributeOptionsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntitymanagerGetAttributeOptionsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAttributeOptions(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProductApi.getAttributeOptions']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Retrieve details of an entity by providing the tenant ID and either entity data or entity ID. Returns information including ID, type, code, label, relationships, and attributes.
         * @summary Get Entity Details
         * @param {EntitymanagerEntityRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEntity(body: EntitymanagerEntityRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntitymanagerEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEntity(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProductApi.getEntity']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Retrieve option lists.
         * @summary Get Options List
         * @param {EntitymanagerGetOptionsListRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOptionsList(body: EntitymanagerGetOptionsListRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntitymanagerGetOptionsListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOptionsList(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProductApi.getOptionsList']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * The GetProduct endpoint enables users to retrieve a product from the system. By sending a request to this endpoint, users can retrieve a product by providing its unique identifier.
         * @summary Get Product
         * @param {ProductGetProductRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProduct(body: ProductGetProductRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductGetProductResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProduct(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProductApi.getProduct']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * The GetProductByCode endpoint enables users to retrieve a product from the system. By sending a request to this endpoint, users can retrieve a product by providing its unique code.
         * @summary Get Product By Code
         * @param {ProductGetProductByCodeRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProductByCode(body: ProductGetProductByCodeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductGetProductByCodeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProductByCode(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProductApi.getProductByCode']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * The GetProductByUrlKey endpoint enables users to retrieve a product from the system. By sending a request to this endpoint, users can retrieve a product by providing its unique url key.
         * @summary Get Product By Url Key
         * @param {ProductGetProductByUrlKeyRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProductByUrlKey(body: ProductGetProductByUrlKeyRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductGetProductByUrlKeyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProductByUrlKey(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProductApi.getProductByUrlKey']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary List Attribute Options
         * @param {EntitymanagerListAttributeOptionsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAttributeOptions(body: EntitymanagerListAttributeOptionsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntitymanagerListAttributeOptionsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAttributeOptions(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProductApi.listAttributeOptions']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary List Entities
         * @param {EntitymanagerListEntitiesRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listEntities(body: EntitymanagerListEntitiesRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntitymanagerListEntitiesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listEntities(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProductApi.listEntities']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * The ListOptionsLists endpoint allows users to retrieve a list of OptionLists available in the system. By making a request to this endpoint with the provided request format, users can obtain all the OptionLists associated with the specified tenant. This functionality enables users to access and manage the predefined options available for various attributes within the system. Utilizing the ListOptionsLists endpoint provides a convenient way to retrieve and work with OptionLists, facilitating efficient management of attribute options and ensuring consistency in attribute values throughout the system.
         * @summary List Options Lists
         * @param {EntitymanagerListOptionsListsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listOptionsLists(body: EntitymanagerListOptionsListsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntitymanagerListOptionsListsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listOptionsLists(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProductApi.listOptionsLists']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * The ListProducts endpoint provides users with the ability to retrieve a filtered list of products based on specific criteria. By including filter parameters in the request, users can customize the response to only include products that meet certain conditions, such as price range, category, availability, or any other relevant attributes. This endpoint empowers users to efficiently narrow down the product selection and retrieve tailored results.
         * @summary List Products
         * @param {ProductListProductsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listProducts(body: ProductListProductsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductListProductsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listProducts(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProductApi.listProducts']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * The ListProductsByIds endpoint allows users to retrieve a list of products based on provided IDs. By making a request to this endpoint and specifying a set of product IDs, users can retrieve detailed information about the corresponding products. This endpoint facilitates efficient retrieval of specific products, enabling applications to display accurate and targeted product information to users.
         * @summary List Products By Ids
         * @param {ProductListProductsByIdsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listProductsByIds(body: ProductListProductsByIdsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductListProductsByIdsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listProductsByIds(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProductApi.listProductsByIds']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary List Products By Sku
         * @param {ProductListProductsBySkuRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listProductsBySku(body: ProductListProductsBySkuRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductListProductsBySkuResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listProductsBySku(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProductApi.listProductsBySku']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary List Product Variants By Sku
         * @param {ProductListVariantsBySkuRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listVariantsBySku(body: ProductListVariantsBySkuRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductListVariantsBySkuResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listVariantsBySku(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProductApi.listVariantsBySku']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Assets endpoints
         * @param {ProductBulkAddAssetsEntriesRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productBulkAddAssetsEntries(body: ProductBulkAddAssetsEntriesRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductBulkAddAssetsEntriesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productBulkAddAssetsEntries(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProductApi.productBulkAddAssetsEntries']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Allow creation of multiple attributes. If any attribute is invalid, an error will be returned with more details, and in the response body, the attributes created will be returned.
         * @param {EntitymanagerBulkCreateAttributeRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productBulkCreateAttribute(body: EntitymanagerBulkCreateAttributeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntitymanagerBulkCreateAttributeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productBulkCreateAttribute(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProductApi.productBulkCreateAttribute']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {ProductBulkDeleteProductsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productBulkDeleteProducts(body: ProductBulkDeleteProductsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productBulkDeleteProducts(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProductApi.productBulkDeleteProducts']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {ProductBulkRemoveAssetsEntriesRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productBulkRemoveAssetsEntries(body: ProductBulkRemoveAssetsEntriesRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productBulkRemoveAssetsEntries(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProductApi.productBulkRemoveAssetsEntries']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {ProductBulkUpdateRequest} body 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async productBulkUpdate(body: ProductBulkUpdateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductBulkUpdateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productBulkUpdate(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProductApi.productBulkUpdate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {ProductBulkUpdateAssetsEntriesRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productBulkUpdateAssetsEntries(body: ProductBulkUpdateAssetsEntriesRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductBulkUpdateAssetsEntriesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productBulkUpdateAssetsEntries(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProductApi.productBulkUpdateAssetsEntries']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {EntitymanagerCreateAttributeGroupRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productCreateAttributeGroup(body: EntitymanagerCreateAttributeGroupRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntitymanagerAttributeGroup>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productCreateAttributeGroup(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProductApi.productCreateAttributeGroup']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {ProductCreateProductRequest} body The CreateProductRequest message is used to create a new product within the system. It contains various fields that allow specifying the details and attributes of the product.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async productCreateProduct(body: ProductCreateProductRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductCreateProductResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productCreateProduct(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProductApi.productCreateProduct']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {ProductCreateProductRequestV2} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productCreateProductV2(body: ProductCreateProductRequestV2, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductCreateProductResponseV2>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productCreateProductV2(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProductApi.productCreateProductV2']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {ProductDeleteRequest} body 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async productDelete(body: ProductDeleteRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductDeleteResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productDelete(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProductApi.productDelete']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {EntitymanagerDeleteAttributeRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productDeleteAttribute(body: EntitymanagerDeleteAttributeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productDeleteAttribute(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProductApi.productDeleteAttribute']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {ProductDeleteProductRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productDeleteProduct(body: ProductDeleteProductRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productDeleteProduct(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProductApi.productDeleteProduct']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {EntitymanagerGetAttributeGroupRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productGetAttributeGroup(body: EntitymanagerGetAttributeGroupRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntitymanagerAttributeGroup>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productGetAttributeGroup(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProductApi.productGetAttributeGroup']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Attribute Groups endpoints
         * @param {EntitymanagerListAttributeGroupsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productListAttributeGroups(body: EntitymanagerListAttributeGroupsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntitymanagerListAttributeGroupsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productListAttributeGroups(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProductApi.productListAttributeGroups']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {EntitymanagerUpdateAttributeRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productUpdateAttribute(body: EntitymanagerUpdateAttributeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntitymanagerAttribute>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productUpdateAttribute(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProductApi.productUpdateAttribute']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {EntitymanagerUpdateAttributeGroupRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productUpdateAttributeGroup(body: EntitymanagerUpdateAttributeGroupRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntitymanagerAttributeGroup>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productUpdateAttributeGroup(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProductApi.productUpdateAttributeGroup']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {ProductUpdateProductRequest} body 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async productUpdateProduct(body: ProductUpdateProductRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductUpdateProductResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productUpdateProduct(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProductApi.productUpdateProduct']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {ProductUpdateProductRequestV2} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productUpdateProductV2(body: ProductUpdateProductRequestV2, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productUpdateProductV2(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProductApi.productUpdateProductV2']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * The RemoveMediaGalleryEntry endpoint allows users to remove a specific media entry from a product\'s gallery. By making a request to this endpoint and providing the tenant ID, product ID, and the unique identifier of the media entry, users can easily manage and update the visual content of a product\'s gallery. 
         * @summary Remove Media Gallery Entry
         * @param {ProductRemoveMediaGalleryEntryRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeMediaGalleryEntry(body: ProductRemoveMediaGalleryEntryRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeMediaGalleryEntry(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProductApi.removeMediaGalleryEntry']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Update Attribute Options
         * @param {EntitymanagerUpdateAttributeOptionsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAttributeOptions(body: EntitymanagerUpdateAttributeOptionsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntitymanagerUpdateAttributeOptionsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAttributeOptions(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProductApi.updateAttributeOptions']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * The UpdateMediaGalleryEntry endpoint allows users to modify and update a specific media entry within a product\'s gallery. By sending a request to this endpoint and providing the necessary information, users can efficiently update the media asset, position, and metadata associated with the entry.
         * @summary Update Media Gallery Entry
         * @param {ProductUpdateMediaGalleryEntryRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMediaGalleryEntry(body: ProductUpdateMediaGalleryEntryRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMediaGalleryEntry(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProductApi.updateMediaGalleryEntry']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Update Options List
         * @param {EntitymanagerUpdateOptionsListRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateOptionsList(body: EntitymanagerUpdateOptionsListRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntitymanagerUpdateOptionsListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateOptionsList(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProductApi.updateOptionsList']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * ProductApi - factory interface
 * @export
 */
export const ProductApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductApiFp(configuration)
    return {
        /**
         * The AddMediaGalleryEntry endpoint allows users to add a new media entry to the gallery of a specific product. To make a request to this endpoint, users need to provide the necessary information in the specified format. The request includes the tenant_id to specify the relevant tenant, the product_id to identify the target product, and the asset_grn which represents the globally unique identifier for the media asset being added. Additionally, the position field indicates the desired position of the media entry within the gallery, allowing users to control the order in which the media items are displayed. The metadata field, which is a repeated field, provides the option to include additional metadata associated with the media entry.
         * @summary Add Media Gallery Entry
         * @param {ProductAddMediaGalleryEntryRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMediaGalleryEntry(body: ProductAddMediaGalleryEntryRequest, options?: any): AxiosPromise<ProductAddMediaGalleryEntryResponse> {
            return localVarFp.addMediaGalleryEntry(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Version 2 of bulk updates for product attributes with enhanced payload structure and response format.
         * @summary Bulk Update Products
         * @param {ProductBulkUpdateRequestV2} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkUpdateV2(body: ProductBulkUpdateRequestV2, options?: any): AxiosPromise<ProductBulkUpdateResponse> {
            return localVarFp.bulkUpdateV2(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Create attribute options with specified codes, values, and swatches. Returns created options and any associated errors.
         * @summary Create Attribute Options
         * @param {EntitymanagerCreateAttributeOptionsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAttributeOptions(body: EntitymanagerCreateAttributeOptionsRequest, options?: any): AxiosPromise<EntitymanagerCreateAttributeOptionsResponse> {
            return localVarFp.createAttributeOptions(body, options).then((request) => request(axios, basePath));
        },
        /**
         * The CreateEntity endpoint allows users to define and create a new entity with custom attributes, providing a flexible way to represent and manage different data structures within the system. By making a request to this endpoint, users can create a new entity that serves as an abstraction of a product or any other domain-specific object. This endpoint empowers users to define the specific attributes that compose the entity, such as color, composition, technical details, or any other relevant properties. Utilize the CreateEntity endpoint to dynamically extend and adapt your system\'s data model to accommodate diverse business requirements and efficiently manage various types of entities.
         * @summary Create Entity
         * @param {EntitymanagerEntity} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntity(body: EntitymanagerEntity, options?: any): AxiosPromise<EntitymanagerCreateEntityResponse> {
            return localVarFp.createEntity(body, options).then((request) => request(axios, basePath));
        },
        /**
         * The CreateOptionsList endpoint allows users to create an OptionList, which represents a list of predefined options for assigning to an attribute. By making a request to this endpoint with the provided request format, users can create a new OptionList by specifying the relevant tenant ID and providing the OptionList object containing the predefined options. This functionality facilitates efficient management and assignment of predefined attribute values, ensuring consistency and flexibility within the system.
         * @summary Create Options List
         * @param {EntitymanagerCreateOptionsListRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOptionsList(body: EntitymanagerCreateOptionsListRequest, options?: any): AxiosPromise<EntitymanagerCreateOptionsListResponse> {
            return localVarFp.createOptionsList(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve attribute option details by providing the tenant ID, list code, and option ID. Returns the specified attribute option.
         * @summary Get Attribute Option
         * @param {EntitymanagerGetAttributeOptionRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttributeOption(body: EntitymanagerGetAttributeOptionRequest, options?: any): AxiosPromise<EntitymanagerGetAttributeOptionResponse> {
            return localVarFp.getAttributeOption(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a list of attribute options based on the provided tenant ID and list code.
         * @summary Get Attribute Options
         * @param {EntitymanagerGetAttributeOptionsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttributeOptions(body: EntitymanagerGetAttributeOptionsRequest, options?: any): AxiosPromise<EntitymanagerGetAttributeOptionsResponse> {
            return localVarFp.getAttributeOptions(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve details of an entity by providing the tenant ID and either entity data or entity ID. Returns information including ID, type, code, label, relationships, and attributes.
         * @summary Get Entity Details
         * @param {EntitymanagerEntityRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntity(body: EntitymanagerEntityRequest, options?: any): AxiosPromise<EntitymanagerEntity> {
            return localVarFp.getEntity(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve option lists.
         * @summary Get Options List
         * @param {EntitymanagerGetOptionsListRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOptionsList(body: EntitymanagerGetOptionsListRequest, options?: any): AxiosPromise<EntitymanagerGetOptionsListResponse> {
            return localVarFp.getOptionsList(body, options).then((request) => request(axios, basePath));
        },
        /**
         * The GetProduct endpoint enables users to retrieve a product from the system. By sending a request to this endpoint, users can retrieve a product by providing its unique identifier.
         * @summary Get Product
         * @param {ProductGetProductRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProduct(body: ProductGetProductRequest, options?: any): AxiosPromise<ProductGetProductResponse> {
            return localVarFp.getProduct(body, options).then((request) => request(axios, basePath));
        },
        /**
         * The GetProductByCode endpoint enables users to retrieve a product from the system. By sending a request to this endpoint, users can retrieve a product by providing its unique code.
         * @summary Get Product By Code
         * @param {ProductGetProductByCodeRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductByCode(body: ProductGetProductByCodeRequest, options?: any): AxiosPromise<ProductGetProductByCodeResponse> {
            return localVarFp.getProductByCode(body, options).then((request) => request(axios, basePath));
        },
        /**
         * The GetProductByUrlKey endpoint enables users to retrieve a product from the system. By sending a request to this endpoint, users can retrieve a product by providing its unique url key.
         * @summary Get Product By Url Key
         * @param {ProductGetProductByUrlKeyRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductByUrlKey(body: ProductGetProductByUrlKeyRequest, options?: any): AxiosPromise<ProductGetProductByUrlKeyResponse> {
            return localVarFp.getProductByUrlKey(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List Attribute Options
         * @param {EntitymanagerListAttributeOptionsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAttributeOptions(body: EntitymanagerListAttributeOptionsRequest, options?: any): AxiosPromise<EntitymanagerListAttributeOptionsResponse> {
            return localVarFp.listAttributeOptions(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List Entities
         * @param {EntitymanagerListEntitiesRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEntities(body: EntitymanagerListEntitiesRequest, options?: any): AxiosPromise<EntitymanagerListEntitiesResponse> {
            return localVarFp.listEntities(body, options).then((request) => request(axios, basePath));
        },
        /**
         * The ListOptionsLists endpoint allows users to retrieve a list of OptionLists available in the system. By making a request to this endpoint with the provided request format, users can obtain all the OptionLists associated with the specified tenant. This functionality enables users to access and manage the predefined options available for various attributes within the system. Utilizing the ListOptionsLists endpoint provides a convenient way to retrieve and work with OptionLists, facilitating efficient management of attribute options and ensuring consistency in attribute values throughout the system.
         * @summary List Options Lists
         * @param {EntitymanagerListOptionsListsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOptionsLists(body: EntitymanagerListOptionsListsRequest, options?: any): AxiosPromise<EntitymanagerListOptionsListsResponse> {
            return localVarFp.listOptionsLists(body, options).then((request) => request(axios, basePath));
        },
        /**
         * The ListProducts endpoint provides users with the ability to retrieve a filtered list of products based on specific criteria. By including filter parameters in the request, users can customize the response to only include products that meet certain conditions, such as price range, category, availability, or any other relevant attributes. This endpoint empowers users to efficiently narrow down the product selection and retrieve tailored results.
         * @summary List Products
         * @param {ProductListProductsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProducts(body: ProductListProductsRequest, options?: any): AxiosPromise<ProductListProductsResponse> {
            return localVarFp.listProducts(body, options).then((request) => request(axios, basePath));
        },
        /**
         * The ListProductsByIds endpoint allows users to retrieve a list of products based on provided IDs. By making a request to this endpoint and specifying a set of product IDs, users can retrieve detailed information about the corresponding products. This endpoint facilitates efficient retrieval of specific products, enabling applications to display accurate and targeted product information to users.
         * @summary List Products By Ids
         * @param {ProductListProductsByIdsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProductsByIds(body: ProductListProductsByIdsRequest, options?: any): AxiosPromise<ProductListProductsByIdsResponse> {
            return localVarFp.listProductsByIds(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List Products By Sku
         * @param {ProductListProductsBySkuRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProductsBySku(body: ProductListProductsBySkuRequest, options?: any): AxiosPromise<ProductListProductsBySkuResponse> {
            return localVarFp.listProductsBySku(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List Product Variants By Sku
         * @param {ProductListVariantsBySkuRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVariantsBySku(body: ProductListVariantsBySkuRequest, options?: any): AxiosPromise<ProductListVariantsBySkuResponse> {
            return localVarFp.listVariantsBySku(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Assets endpoints
         * @param {ProductBulkAddAssetsEntriesRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productBulkAddAssetsEntries(body: ProductBulkAddAssetsEntriesRequest, options?: any): AxiosPromise<ProductBulkAddAssetsEntriesResponse> {
            return localVarFp.productBulkAddAssetsEntries(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Allow creation of multiple attributes. If any attribute is invalid, an error will be returned with more details, and in the response body, the attributes created will be returned.
         * @param {EntitymanagerBulkCreateAttributeRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productBulkCreateAttribute(body: EntitymanagerBulkCreateAttributeRequest, options?: any): AxiosPromise<EntitymanagerBulkCreateAttributeResponse> {
            return localVarFp.productBulkCreateAttribute(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ProductBulkDeleteProductsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productBulkDeleteProducts(body: ProductBulkDeleteProductsRequest, options?: any): AxiosPromise<object> {
            return localVarFp.productBulkDeleteProducts(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ProductBulkRemoveAssetsEntriesRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productBulkRemoveAssetsEntries(body: ProductBulkRemoveAssetsEntriesRequest, options?: any): AxiosPromise<object> {
            return localVarFp.productBulkRemoveAssetsEntries(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ProductBulkUpdateRequest} body 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        productBulkUpdate(body: ProductBulkUpdateRequest, options?: any): AxiosPromise<ProductBulkUpdateResponse> {
            return localVarFp.productBulkUpdate(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ProductBulkUpdateAssetsEntriesRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productBulkUpdateAssetsEntries(body: ProductBulkUpdateAssetsEntriesRequest, options?: any): AxiosPromise<ProductBulkUpdateAssetsEntriesResponse> {
            return localVarFp.productBulkUpdateAssetsEntries(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {EntitymanagerCreateAttributeGroupRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productCreateAttributeGroup(body: EntitymanagerCreateAttributeGroupRequest, options?: any): AxiosPromise<EntitymanagerAttributeGroup> {
            return localVarFp.productCreateAttributeGroup(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ProductCreateProductRequest} body The CreateProductRequest message is used to create a new product within the system. It contains various fields that allow specifying the details and attributes of the product.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        productCreateProduct(body: ProductCreateProductRequest, options?: any): AxiosPromise<ProductCreateProductResponse> {
            return localVarFp.productCreateProduct(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ProductCreateProductRequestV2} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productCreateProductV2(body: ProductCreateProductRequestV2, options?: any): AxiosPromise<ProductCreateProductResponseV2> {
            return localVarFp.productCreateProductV2(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ProductDeleteRequest} body 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        productDelete(body: ProductDeleteRequest, options?: any): AxiosPromise<ProductDeleteResponse> {
            return localVarFp.productDelete(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {EntitymanagerDeleteAttributeRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productDeleteAttribute(body: EntitymanagerDeleteAttributeRequest, options?: any): AxiosPromise<object> {
            return localVarFp.productDeleteAttribute(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ProductDeleteProductRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productDeleteProduct(body: ProductDeleteProductRequest, options?: any): AxiosPromise<object> {
            return localVarFp.productDeleteProduct(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {EntitymanagerGetAttributeGroupRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productGetAttributeGroup(body: EntitymanagerGetAttributeGroupRequest, options?: any): AxiosPromise<EntitymanagerAttributeGroup> {
            return localVarFp.productGetAttributeGroup(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Attribute Groups endpoints
         * @param {EntitymanagerListAttributeGroupsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productListAttributeGroups(body: EntitymanagerListAttributeGroupsRequest, options?: any): AxiosPromise<EntitymanagerListAttributeGroupsResponse> {
            return localVarFp.productListAttributeGroups(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {EntitymanagerUpdateAttributeRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productUpdateAttribute(body: EntitymanagerUpdateAttributeRequest, options?: any): AxiosPromise<EntitymanagerAttribute> {
            return localVarFp.productUpdateAttribute(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {EntitymanagerUpdateAttributeGroupRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productUpdateAttributeGroup(body: EntitymanagerUpdateAttributeGroupRequest, options?: any): AxiosPromise<EntitymanagerAttributeGroup> {
            return localVarFp.productUpdateAttributeGroup(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ProductUpdateProductRequest} body 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        productUpdateProduct(body: ProductUpdateProductRequest, options?: any): AxiosPromise<ProductUpdateProductResponse> {
            return localVarFp.productUpdateProduct(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ProductUpdateProductRequestV2} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productUpdateProductV2(body: ProductUpdateProductRequestV2, options?: any): AxiosPromise<object> {
            return localVarFp.productUpdateProductV2(body, options).then((request) => request(axios, basePath));
        },
        /**
         * The RemoveMediaGalleryEntry endpoint allows users to remove a specific media entry from a product\'s gallery. By making a request to this endpoint and providing the tenant ID, product ID, and the unique identifier of the media entry, users can easily manage and update the visual content of a product\'s gallery. 
         * @summary Remove Media Gallery Entry
         * @param {ProductRemoveMediaGalleryEntryRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeMediaGalleryEntry(body: ProductRemoveMediaGalleryEntryRequest, options?: any): AxiosPromise<object> {
            return localVarFp.removeMediaGalleryEntry(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Attribute Options
         * @param {EntitymanagerUpdateAttributeOptionsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAttributeOptions(body: EntitymanagerUpdateAttributeOptionsRequest, options?: any): AxiosPromise<EntitymanagerUpdateAttributeOptionsResponse> {
            return localVarFp.updateAttributeOptions(body, options).then((request) => request(axios, basePath));
        },
        /**
         * The UpdateMediaGalleryEntry endpoint allows users to modify and update a specific media entry within a product\'s gallery. By sending a request to this endpoint and providing the necessary information, users can efficiently update the media asset, position, and metadata associated with the entry.
         * @summary Update Media Gallery Entry
         * @param {ProductUpdateMediaGalleryEntryRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMediaGalleryEntry(body: ProductUpdateMediaGalleryEntryRequest, options?: any): AxiosPromise<object> {
            return localVarFp.updateMediaGalleryEntry(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Options List
         * @param {EntitymanagerUpdateOptionsListRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOptionsList(body: EntitymanagerUpdateOptionsListRequest, options?: any): AxiosPromise<EntitymanagerUpdateOptionsListResponse> {
            return localVarFp.updateOptionsList(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductApi - object-oriented interface
 * @export
 * @class ProductApi
 * @extends {BaseAPI}
 */
export class ProductApi extends BaseAPI {
    /**
     * The AddMediaGalleryEntry endpoint allows users to add a new media entry to the gallery of a specific product. To make a request to this endpoint, users need to provide the necessary information in the specified format. The request includes the tenant_id to specify the relevant tenant, the product_id to identify the target product, and the asset_grn which represents the globally unique identifier for the media asset being added. Additionally, the position field indicates the desired position of the media entry within the gallery, allowing users to control the order in which the media items are displayed. The metadata field, which is a repeated field, provides the option to include additional metadata associated with the media entry.
     * @summary Add Media Gallery Entry
     * @param {ProductAddMediaGalleryEntryRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public addMediaGalleryEntry(body: ProductAddMediaGalleryEntryRequest, options?: RawAxiosRequestConfig) {
        return ProductApiFp(this.configuration).addMediaGalleryEntry(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Version 2 of bulk updates for product attributes with enhanced payload structure and response format.
     * @summary Bulk Update Products
     * @param {ProductBulkUpdateRequestV2} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public bulkUpdateV2(body: ProductBulkUpdateRequestV2, options?: RawAxiosRequestConfig) {
        return ProductApiFp(this.configuration).bulkUpdateV2(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create attribute options with specified codes, values, and swatches. Returns created options and any associated errors.
     * @summary Create Attribute Options
     * @param {EntitymanagerCreateAttributeOptionsRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public createAttributeOptions(body: EntitymanagerCreateAttributeOptionsRequest, options?: RawAxiosRequestConfig) {
        return ProductApiFp(this.configuration).createAttributeOptions(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The CreateEntity endpoint allows users to define and create a new entity with custom attributes, providing a flexible way to represent and manage different data structures within the system. By making a request to this endpoint, users can create a new entity that serves as an abstraction of a product or any other domain-specific object. This endpoint empowers users to define the specific attributes that compose the entity, such as color, composition, technical details, or any other relevant properties. Utilize the CreateEntity endpoint to dynamically extend and adapt your system\'s data model to accommodate diverse business requirements and efficiently manage various types of entities.
     * @summary Create Entity
     * @param {EntitymanagerEntity} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public createEntity(body: EntitymanagerEntity, options?: RawAxiosRequestConfig) {
        return ProductApiFp(this.configuration).createEntity(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The CreateOptionsList endpoint allows users to create an OptionList, which represents a list of predefined options for assigning to an attribute. By making a request to this endpoint with the provided request format, users can create a new OptionList by specifying the relevant tenant ID and providing the OptionList object containing the predefined options. This functionality facilitates efficient management and assignment of predefined attribute values, ensuring consistency and flexibility within the system.
     * @summary Create Options List
     * @param {EntitymanagerCreateOptionsListRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public createOptionsList(body: EntitymanagerCreateOptionsListRequest, options?: RawAxiosRequestConfig) {
        return ProductApiFp(this.configuration).createOptionsList(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve attribute option details by providing the tenant ID, list code, and option ID. Returns the specified attribute option.
     * @summary Get Attribute Option
     * @param {EntitymanagerGetAttributeOptionRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public getAttributeOption(body: EntitymanagerGetAttributeOptionRequest, options?: RawAxiosRequestConfig) {
        return ProductApiFp(this.configuration).getAttributeOption(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a list of attribute options based on the provided tenant ID and list code.
     * @summary Get Attribute Options
     * @param {EntitymanagerGetAttributeOptionsRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public getAttributeOptions(body: EntitymanagerGetAttributeOptionsRequest, options?: RawAxiosRequestConfig) {
        return ProductApiFp(this.configuration).getAttributeOptions(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve details of an entity by providing the tenant ID and either entity data or entity ID. Returns information including ID, type, code, label, relationships, and attributes.
     * @summary Get Entity Details
     * @param {EntitymanagerEntityRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public getEntity(body: EntitymanagerEntityRequest, options?: RawAxiosRequestConfig) {
        return ProductApiFp(this.configuration).getEntity(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve option lists.
     * @summary Get Options List
     * @param {EntitymanagerGetOptionsListRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public getOptionsList(body: EntitymanagerGetOptionsListRequest, options?: RawAxiosRequestConfig) {
        return ProductApiFp(this.configuration).getOptionsList(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The GetProduct endpoint enables users to retrieve a product from the system. By sending a request to this endpoint, users can retrieve a product by providing its unique identifier.
     * @summary Get Product
     * @param {ProductGetProductRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public getProduct(body: ProductGetProductRequest, options?: RawAxiosRequestConfig) {
        return ProductApiFp(this.configuration).getProduct(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The GetProductByCode endpoint enables users to retrieve a product from the system. By sending a request to this endpoint, users can retrieve a product by providing its unique code.
     * @summary Get Product By Code
     * @param {ProductGetProductByCodeRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public getProductByCode(body: ProductGetProductByCodeRequest, options?: RawAxiosRequestConfig) {
        return ProductApiFp(this.configuration).getProductByCode(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The GetProductByUrlKey endpoint enables users to retrieve a product from the system. By sending a request to this endpoint, users can retrieve a product by providing its unique url key.
     * @summary Get Product By Url Key
     * @param {ProductGetProductByUrlKeyRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public getProductByUrlKey(body: ProductGetProductByUrlKeyRequest, options?: RawAxiosRequestConfig) {
        return ProductApiFp(this.configuration).getProductByUrlKey(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List Attribute Options
     * @param {EntitymanagerListAttributeOptionsRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public listAttributeOptions(body: EntitymanagerListAttributeOptionsRequest, options?: RawAxiosRequestConfig) {
        return ProductApiFp(this.configuration).listAttributeOptions(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List Entities
     * @param {EntitymanagerListEntitiesRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public listEntities(body: EntitymanagerListEntitiesRequest, options?: RawAxiosRequestConfig) {
        return ProductApiFp(this.configuration).listEntities(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The ListOptionsLists endpoint allows users to retrieve a list of OptionLists available in the system. By making a request to this endpoint with the provided request format, users can obtain all the OptionLists associated with the specified tenant. This functionality enables users to access and manage the predefined options available for various attributes within the system. Utilizing the ListOptionsLists endpoint provides a convenient way to retrieve and work with OptionLists, facilitating efficient management of attribute options and ensuring consistency in attribute values throughout the system.
     * @summary List Options Lists
     * @param {EntitymanagerListOptionsListsRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public listOptionsLists(body: EntitymanagerListOptionsListsRequest, options?: RawAxiosRequestConfig) {
        return ProductApiFp(this.configuration).listOptionsLists(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The ListProducts endpoint provides users with the ability to retrieve a filtered list of products based on specific criteria. By including filter parameters in the request, users can customize the response to only include products that meet certain conditions, such as price range, category, availability, or any other relevant attributes. This endpoint empowers users to efficiently narrow down the product selection and retrieve tailored results.
     * @summary List Products
     * @param {ProductListProductsRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public listProducts(body: ProductListProductsRequest, options?: RawAxiosRequestConfig) {
        return ProductApiFp(this.configuration).listProducts(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The ListProductsByIds endpoint allows users to retrieve a list of products based on provided IDs. By making a request to this endpoint and specifying a set of product IDs, users can retrieve detailed information about the corresponding products. This endpoint facilitates efficient retrieval of specific products, enabling applications to display accurate and targeted product information to users.
     * @summary List Products By Ids
     * @param {ProductListProductsByIdsRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public listProductsByIds(body: ProductListProductsByIdsRequest, options?: RawAxiosRequestConfig) {
        return ProductApiFp(this.configuration).listProductsByIds(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List Products By Sku
     * @param {ProductListProductsBySkuRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public listProductsBySku(body: ProductListProductsBySkuRequest, options?: RawAxiosRequestConfig) {
        return ProductApiFp(this.configuration).listProductsBySku(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List Product Variants By Sku
     * @param {ProductListVariantsBySkuRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public listVariantsBySku(body: ProductListVariantsBySkuRequest, options?: RawAxiosRequestConfig) {
        return ProductApiFp(this.configuration).listVariantsBySku(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Assets endpoints
     * @param {ProductBulkAddAssetsEntriesRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public productBulkAddAssetsEntries(body: ProductBulkAddAssetsEntriesRequest, options?: RawAxiosRequestConfig) {
        return ProductApiFp(this.configuration).productBulkAddAssetsEntries(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Allow creation of multiple attributes. If any attribute is invalid, an error will be returned with more details, and in the response body, the attributes created will be returned.
     * @param {EntitymanagerBulkCreateAttributeRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public productBulkCreateAttribute(body: EntitymanagerBulkCreateAttributeRequest, options?: RawAxiosRequestConfig) {
        return ProductApiFp(this.configuration).productBulkCreateAttribute(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ProductBulkDeleteProductsRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public productBulkDeleteProducts(body: ProductBulkDeleteProductsRequest, options?: RawAxiosRequestConfig) {
        return ProductApiFp(this.configuration).productBulkDeleteProducts(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ProductBulkRemoveAssetsEntriesRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public productBulkRemoveAssetsEntries(body: ProductBulkRemoveAssetsEntriesRequest, options?: RawAxiosRequestConfig) {
        return ProductApiFp(this.configuration).productBulkRemoveAssetsEntries(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ProductBulkUpdateRequest} body 
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public productBulkUpdate(body: ProductBulkUpdateRequest, options?: RawAxiosRequestConfig) {
        return ProductApiFp(this.configuration).productBulkUpdate(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ProductBulkUpdateAssetsEntriesRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public productBulkUpdateAssetsEntries(body: ProductBulkUpdateAssetsEntriesRequest, options?: RawAxiosRequestConfig) {
        return ProductApiFp(this.configuration).productBulkUpdateAssetsEntries(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {EntitymanagerCreateAttributeGroupRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public productCreateAttributeGroup(body: EntitymanagerCreateAttributeGroupRequest, options?: RawAxiosRequestConfig) {
        return ProductApiFp(this.configuration).productCreateAttributeGroup(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ProductCreateProductRequest} body The CreateProductRequest message is used to create a new product within the system. It contains various fields that allow specifying the details and attributes of the product.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public productCreateProduct(body: ProductCreateProductRequest, options?: RawAxiosRequestConfig) {
        return ProductApiFp(this.configuration).productCreateProduct(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ProductCreateProductRequestV2} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public productCreateProductV2(body: ProductCreateProductRequestV2, options?: RawAxiosRequestConfig) {
        return ProductApiFp(this.configuration).productCreateProductV2(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ProductDeleteRequest} body 
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public productDelete(body: ProductDeleteRequest, options?: RawAxiosRequestConfig) {
        return ProductApiFp(this.configuration).productDelete(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {EntitymanagerDeleteAttributeRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public productDeleteAttribute(body: EntitymanagerDeleteAttributeRequest, options?: RawAxiosRequestConfig) {
        return ProductApiFp(this.configuration).productDeleteAttribute(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ProductDeleteProductRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public productDeleteProduct(body: ProductDeleteProductRequest, options?: RawAxiosRequestConfig) {
        return ProductApiFp(this.configuration).productDeleteProduct(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {EntitymanagerGetAttributeGroupRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public productGetAttributeGroup(body: EntitymanagerGetAttributeGroupRequest, options?: RawAxiosRequestConfig) {
        return ProductApiFp(this.configuration).productGetAttributeGroup(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Attribute Groups endpoints
     * @param {EntitymanagerListAttributeGroupsRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public productListAttributeGroups(body: EntitymanagerListAttributeGroupsRequest, options?: RawAxiosRequestConfig) {
        return ProductApiFp(this.configuration).productListAttributeGroups(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {EntitymanagerUpdateAttributeRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public productUpdateAttribute(body: EntitymanagerUpdateAttributeRequest, options?: RawAxiosRequestConfig) {
        return ProductApiFp(this.configuration).productUpdateAttribute(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {EntitymanagerUpdateAttributeGroupRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public productUpdateAttributeGroup(body: EntitymanagerUpdateAttributeGroupRequest, options?: RawAxiosRequestConfig) {
        return ProductApiFp(this.configuration).productUpdateAttributeGroup(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ProductUpdateProductRequest} body 
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public productUpdateProduct(body: ProductUpdateProductRequest, options?: RawAxiosRequestConfig) {
        return ProductApiFp(this.configuration).productUpdateProduct(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ProductUpdateProductRequestV2} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public productUpdateProductV2(body: ProductUpdateProductRequestV2, options?: RawAxiosRequestConfig) {
        return ProductApiFp(this.configuration).productUpdateProductV2(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The RemoveMediaGalleryEntry endpoint allows users to remove a specific media entry from a product\'s gallery. By making a request to this endpoint and providing the tenant ID, product ID, and the unique identifier of the media entry, users can easily manage and update the visual content of a product\'s gallery. 
     * @summary Remove Media Gallery Entry
     * @param {ProductRemoveMediaGalleryEntryRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public removeMediaGalleryEntry(body: ProductRemoveMediaGalleryEntryRequest, options?: RawAxiosRequestConfig) {
        return ProductApiFp(this.configuration).removeMediaGalleryEntry(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Attribute Options
     * @param {EntitymanagerUpdateAttributeOptionsRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public updateAttributeOptions(body: EntitymanagerUpdateAttributeOptionsRequest, options?: RawAxiosRequestConfig) {
        return ProductApiFp(this.configuration).updateAttributeOptions(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The UpdateMediaGalleryEntry endpoint allows users to modify and update a specific media entry within a product\'s gallery. By sending a request to this endpoint and providing the necessary information, users can efficiently update the media asset, position, and metadata associated with the entry.
     * @summary Update Media Gallery Entry
     * @param {ProductUpdateMediaGalleryEntryRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public updateMediaGalleryEntry(body: ProductUpdateMediaGalleryEntryRequest, options?: RawAxiosRequestConfig) {
        return ProductApiFp(this.configuration).updateMediaGalleryEntry(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Options List
     * @param {EntitymanagerUpdateOptionsListRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public updateOptionsList(body: EntitymanagerUpdateOptionsListRequest, options?: RawAxiosRequestConfig) {
        return ProductApiFp(this.configuration).updateOptionsList(body, options).then((request) => request(this.axios, this.basePath));
    }
}



