/* tslint:disable */
/* eslint-disable */
/**
 * Product Service
 * API for managing products
 *
 * The version of the OpenAPI document: v1
 * Contact: info@gemini-commerce.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  EntitymanagerAttribute,
  EntitymanagerAttributeGroup,
  EntitymanagerBulkCreateAttributeRequest,
  EntitymanagerBulkCreateAttributeResponse,
  EntitymanagerCreateAttributeGroupRequest,
  EntitymanagerCreateAttributeOptionsRequest,
  EntitymanagerCreateAttributeOptionsResponse,
  EntitymanagerCreateEntityResponse,
  EntitymanagerCreateOptionsListRequest,
  EntitymanagerCreateOptionsListResponse,
  EntitymanagerDeleteAttributeRequest,
  EntitymanagerEntity,
  EntitymanagerEntityRequest,
  EntitymanagerGetAttributeGroupRequest,
  EntitymanagerGetAttributeOptionRequest,
  EntitymanagerGetAttributeOptionResponse,
  EntitymanagerGetAttributeOptionsRequest,
  EntitymanagerGetAttributeOptionsResponse,
  EntitymanagerGetOptionsListRequest,
  EntitymanagerGetOptionsListResponse,
  EntitymanagerListAttributeGroupsRequest,
  EntitymanagerListAttributeGroupsResponse,
  EntitymanagerListAttributeOptionsRequest,
  EntitymanagerListAttributeOptionsResponse,
  EntitymanagerListEntitiesRequest,
  EntitymanagerListEntitiesResponse,
  EntitymanagerListOptionsListsRequest,
  EntitymanagerListOptionsListsResponse,
  EntitymanagerUpdateAttributeGroupRequest,
  EntitymanagerUpdateAttributeOptionsRequest,
  EntitymanagerUpdateAttributeOptionsResponse,
  EntitymanagerUpdateAttributeRequest,
  EntitymanagerUpdateOptionsListRequest,
  EntitymanagerUpdateOptionsListResponse,
  ProductAddMediaGalleryEntryRequest,
  ProductAddMediaGalleryEntryResponse,
  ProductBulkAddAssetsEntriesRequest,
  ProductBulkAddAssetsEntriesResponse,
  ProductBulkDeleteProductsRequest,
  ProductBulkRemoveAssetsEntriesRequest,
  ProductBulkUpdateAssetsEntriesRequest,
  ProductBulkUpdateAssetsEntriesResponse,
  ProductBulkUpdateRequest,
  ProductBulkUpdateRequestV2,
  ProductBulkUpdateResponse,
  ProductBulkUpdateResponseV2,
  ProductCreateProductRequest,
  ProductCreateProductRequestV2,
  ProductCreateProductResponse,
  ProductCreateProductResponseV2,
  ProductDeleteProductRequest,
  ProductDeleteRequest,
  ProductDeleteResponse,
  ProductGetProductByCodeRequest,
  ProductGetProductByCodeResponse,
  ProductGetProductByUrlKeyRequest,
  ProductGetProductByUrlKeyResponse,
  ProductGetProductRequest,
  ProductGetProductResponse,
  ProductListProductsByIdsRequest,
  ProductListProductsByIdsResponse,
  ProductListProductsBySkuRequest,
  ProductListProductsBySkuResponse,
  ProductListProductsRequest,
  ProductListProductsResponse,
  ProductListVariantsBySkuRequest,
  ProductListVariantsBySkuResponse,
  ProductRemoveMediaGalleryEntryRequest,
  ProductUpdateMediaGalleryEntryRequest,
  ProductUpdateProductRequest,
  ProductUpdateProductRequestV2,
  ProductUpdateProductResponse,
  RpcStatus,
} from '../models/index';
import {
    EntitymanagerAttributeFromJSON,
    EntitymanagerAttributeToJSON,
    EntitymanagerAttributeGroupFromJSON,
    EntitymanagerAttributeGroupToJSON,
    EntitymanagerBulkCreateAttributeRequestFromJSON,
    EntitymanagerBulkCreateAttributeRequestToJSON,
    EntitymanagerBulkCreateAttributeResponseFromJSON,
    EntitymanagerBulkCreateAttributeResponseToJSON,
    EntitymanagerCreateAttributeGroupRequestFromJSON,
    EntitymanagerCreateAttributeGroupRequestToJSON,
    EntitymanagerCreateAttributeOptionsRequestFromJSON,
    EntitymanagerCreateAttributeOptionsRequestToJSON,
    EntitymanagerCreateAttributeOptionsResponseFromJSON,
    EntitymanagerCreateAttributeOptionsResponseToJSON,
    EntitymanagerCreateEntityResponseFromJSON,
    EntitymanagerCreateEntityResponseToJSON,
    EntitymanagerCreateOptionsListRequestFromJSON,
    EntitymanagerCreateOptionsListRequestToJSON,
    EntitymanagerCreateOptionsListResponseFromJSON,
    EntitymanagerCreateOptionsListResponseToJSON,
    EntitymanagerDeleteAttributeRequestFromJSON,
    EntitymanagerDeleteAttributeRequestToJSON,
    EntitymanagerEntityFromJSON,
    EntitymanagerEntityToJSON,
    EntitymanagerEntityRequestFromJSON,
    EntitymanagerEntityRequestToJSON,
    EntitymanagerGetAttributeGroupRequestFromJSON,
    EntitymanagerGetAttributeGroupRequestToJSON,
    EntitymanagerGetAttributeOptionRequestFromJSON,
    EntitymanagerGetAttributeOptionRequestToJSON,
    EntitymanagerGetAttributeOptionResponseFromJSON,
    EntitymanagerGetAttributeOptionResponseToJSON,
    EntitymanagerGetAttributeOptionsRequestFromJSON,
    EntitymanagerGetAttributeOptionsRequestToJSON,
    EntitymanagerGetAttributeOptionsResponseFromJSON,
    EntitymanagerGetAttributeOptionsResponseToJSON,
    EntitymanagerGetOptionsListRequestFromJSON,
    EntitymanagerGetOptionsListRequestToJSON,
    EntitymanagerGetOptionsListResponseFromJSON,
    EntitymanagerGetOptionsListResponseToJSON,
    EntitymanagerListAttributeGroupsRequestFromJSON,
    EntitymanagerListAttributeGroupsRequestToJSON,
    EntitymanagerListAttributeGroupsResponseFromJSON,
    EntitymanagerListAttributeGroupsResponseToJSON,
    EntitymanagerListAttributeOptionsRequestFromJSON,
    EntitymanagerListAttributeOptionsRequestToJSON,
    EntitymanagerListAttributeOptionsResponseFromJSON,
    EntitymanagerListAttributeOptionsResponseToJSON,
    EntitymanagerListEntitiesRequestFromJSON,
    EntitymanagerListEntitiesRequestToJSON,
    EntitymanagerListEntitiesResponseFromJSON,
    EntitymanagerListEntitiesResponseToJSON,
    EntitymanagerListOptionsListsRequestFromJSON,
    EntitymanagerListOptionsListsRequestToJSON,
    EntitymanagerListOptionsListsResponseFromJSON,
    EntitymanagerListOptionsListsResponseToJSON,
    EntitymanagerUpdateAttributeGroupRequestFromJSON,
    EntitymanagerUpdateAttributeGroupRequestToJSON,
    EntitymanagerUpdateAttributeOptionsRequestFromJSON,
    EntitymanagerUpdateAttributeOptionsRequestToJSON,
    EntitymanagerUpdateAttributeOptionsResponseFromJSON,
    EntitymanagerUpdateAttributeOptionsResponseToJSON,
    EntitymanagerUpdateAttributeRequestFromJSON,
    EntitymanagerUpdateAttributeRequestToJSON,
    EntitymanagerUpdateOptionsListRequestFromJSON,
    EntitymanagerUpdateOptionsListRequestToJSON,
    EntitymanagerUpdateOptionsListResponseFromJSON,
    EntitymanagerUpdateOptionsListResponseToJSON,
    ProductAddMediaGalleryEntryRequestFromJSON,
    ProductAddMediaGalleryEntryRequestToJSON,
    ProductAddMediaGalleryEntryResponseFromJSON,
    ProductAddMediaGalleryEntryResponseToJSON,
    ProductBulkAddAssetsEntriesRequestFromJSON,
    ProductBulkAddAssetsEntriesRequestToJSON,
    ProductBulkAddAssetsEntriesResponseFromJSON,
    ProductBulkAddAssetsEntriesResponseToJSON,
    ProductBulkDeleteProductsRequestFromJSON,
    ProductBulkDeleteProductsRequestToJSON,
    ProductBulkRemoveAssetsEntriesRequestFromJSON,
    ProductBulkRemoveAssetsEntriesRequestToJSON,
    ProductBulkUpdateAssetsEntriesRequestFromJSON,
    ProductBulkUpdateAssetsEntriesRequestToJSON,
    ProductBulkUpdateAssetsEntriesResponseFromJSON,
    ProductBulkUpdateAssetsEntriesResponseToJSON,
    ProductBulkUpdateRequestFromJSON,
    ProductBulkUpdateRequestToJSON,
    ProductBulkUpdateRequestV2FromJSON,
    ProductBulkUpdateRequestV2ToJSON,
    ProductBulkUpdateResponseFromJSON,
    ProductBulkUpdateResponseToJSON,
    ProductBulkUpdateResponseV2FromJSON,
    ProductBulkUpdateResponseV2ToJSON,
    ProductCreateProductRequestFromJSON,
    ProductCreateProductRequestToJSON,
    ProductCreateProductRequestV2FromJSON,
    ProductCreateProductRequestV2ToJSON,
    ProductCreateProductResponseFromJSON,
    ProductCreateProductResponseToJSON,
    ProductCreateProductResponseV2FromJSON,
    ProductCreateProductResponseV2ToJSON,
    ProductDeleteProductRequestFromJSON,
    ProductDeleteProductRequestToJSON,
    ProductDeleteRequestFromJSON,
    ProductDeleteRequestToJSON,
    ProductDeleteResponseFromJSON,
    ProductDeleteResponseToJSON,
    ProductGetProductByCodeRequestFromJSON,
    ProductGetProductByCodeRequestToJSON,
    ProductGetProductByCodeResponseFromJSON,
    ProductGetProductByCodeResponseToJSON,
    ProductGetProductByUrlKeyRequestFromJSON,
    ProductGetProductByUrlKeyRequestToJSON,
    ProductGetProductByUrlKeyResponseFromJSON,
    ProductGetProductByUrlKeyResponseToJSON,
    ProductGetProductRequestFromJSON,
    ProductGetProductRequestToJSON,
    ProductGetProductResponseFromJSON,
    ProductGetProductResponseToJSON,
    ProductListProductsByIdsRequestFromJSON,
    ProductListProductsByIdsRequestToJSON,
    ProductListProductsByIdsResponseFromJSON,
    ProductListProductsByIdsResponseToJSON,
    ProductListProductsBySkuRequestFromJSON,
    ProductListProductsBySkuRequestToJSON,
    ProductListProductsBySkuResponseFromJSON,
    ProductListProductsBySkuResponseToJSON,
    ProductListProductsRequestFromJSON,
    ProductListProductsRequestToJSON,
    ProductListProductsResponseFromJSON,
    ProductListProductsResponseToJSON,
    ProductListVariantsBySkuRequestFromJSON,
    ProductListVariantsBySkuRequestToJSON,
    ProductListVariantsBySkuResponseFromJSON,
    ProductListVariantsBySkuResponseToJSON,
    ProductRemoveMediaGalleryEntryRequestFromJSON,
    ProductRemoveMediaGalleryEntryRequestToJSON,
    ProductUpdateMediaGalleryEntryRequestFromJSON,
    ProductUpdateMediaGalleryEntryRequestToJSON,
    ProductUpdateProductRequestFromJSON,
    ProductUpdateProductRequestToJSON,
    ProductUpdateProductRequestV2FromJSON,
    ProductUpdateProductRequestV2ToJSON,
    ProductUpdateProductResponseFromJSON,
    ProductUpdateProductResponseToJSON,
    RpcStatusFromJSON,
    RpcStatusToJSON,
} from '../models/index';

export interface ProductAddMediaGalleryEntryOperationRequest {
    body: ProductAddMediaGalleryEntryRequest;
}

export interface ProductBulkAddAssetsEntriesOperationRequest {
    body: ProductBulkAddAssetsEntriesRequest;
}

export interface ProductBulkCreateAttributeRequest {
    body: EntitymanagerBulkCreateAttributeRequest;
}

export interface ProductBulkDeleteProductsOperationRequest {
    body: ProductBulkDeleteProductsRequest;
}

export interface ProductBulkRemoveAssetsEntriesOperationRequest {
    body: ProductBulkRemoveAssetsEntriesRequest;
}

export interface ProductBulkUpdateOperationRequest {
    body: ProductBulkUpdateRequest;
}

export interface ProductBulkUpdateAssetsEntriesOperationRequest {
    body: ProductBulkUpdateAssetsEntriesRequest;
}

export interface ProductBulkUpdateV2Request {
    body: ProductBulkUpdateRequestV2;
}

export interface ProductCreateAttributeGroupRequest {
    body: EntitymanagerCreateAttributeGroupRequest;
}

export interface ProductCreateAttributeOptionsRequest {
    body: EntitymanagerCreateAttributeOptionsRequest;
}

export interface ProductCreateEntityRequest {
    body: EntitymanagerEntity;
}

export interface ProductCreateOptionsListRequest {
    body: EntitymanagerCreateOptionsListRequest;
}

export interface ProductCreateProductOperationRequest {
    body: ProductCreateProductRequest;
}

export interface ProductCreateProductV2Request {
    body: ProductCreateProductRequestV2;
}

export interface ProductDeleteOperationRequest {
    body: ProductDeleteRequest;
}

export interface ProductDeleteAttributeRequest {
    body: EntitymanagerDeleteAttributeRequest;
}

export interface ProductDeleteProductOperationRequest {
    body: ProductDeleteProductRequest;
}

export interface ProductGetAttributeGroupRequest {
    body: EntitymanagerGetAttributeGroupRequest;
}

export interface ProductGetAttributeOptionRequest {
    body: EntitymanagerGetAttributeOptionRequest;
}

export interface ProductGetAttributeOptionsRequest {
    body: EntitymanagerGetAttributeOptionsRequest;
}

export interface ProductGetEntityRequest {
    body: EntitymanagerEntityRequest;
}

export interface ProductGetOptionsListRequest {
    body: EntitymanagerGetOptionsListRequest;
}

export interface ProductGetProductOperationRequest {
    body: ProductGetProductRequest;
}

export interface ProductGetProductByCodeOperationRequest {
    body: ProductGetProductByCodeRequest;
}

export interface ProductGetProductByUrlKeyOperationRequest {
    body: ProductGetProductByUrlKeyRequest;
}

export interface ProductListAttributeGroupsRequest {
    body: EntitymanagerListAttributeGroupsRequest;
}

export interface ProductListAttributeOptionsRequest {
    body: EntitymanagerListAttributeOptionsRequest;
}

export interface ProductListEntitiesRequest {
    body: EntitymanagerListEntitiesRequest;
}

export interface ProductListOptionsListsRequest {
    body: EntitymanagerListOptionsListsRequest;
}

export interface ProductListProductsOperationRequest {
    body: ProductListProductsRequest;
}

export interface ProductListProductsByIdsOperationRequest {
    body: ProductListProductsByIdsRequest;
}

export interface ProductListProductsBySkuOperationRequest {
    body: ProductListProductsBySkuRequest;
}

export interface ProductListVariantsBySkuOperationRequest {
    body: ProductListVariantsBySkuRequest;
}

export interface ProductRemoveMediaGalleryEntryOperationRequest {
    body: ProductRemoveMediaGalleryEntryRequest;
}

export interface ProductUpdateAttributeRequest {
    body: EntitymanagerUpdateAttributeRequest;
}

export interface ProductUpdateAttributeGroupRequest {
    body: EntitymanagerUpdateAttributeGroupRequest;
}

export interface ProductUpdateAttributeOptionsRequest {
    body: EntitymanagerUpdateAttributeOptionsRequest;
}

export interface ProductUpdateMediaGalleryEntryOperationRequest {
    body: ProductUpdateMediaGalleryEntryRequest;
}

export interface ProductUpdateOptionsListRequest {
    body: EntitymanagerUpdateOptionsListRequest;
}

export interface ProductUpdateProductOperationRequest {
    body: ProductUpdateProductRequest;
}

export interface ProductUpdateProductV2Request {
    body: ProductUpdateProductRequestV2;
}

/**
 * 
 */
export class ProductApi extends runtime.BaseAPI {

    /**
     */
    async productAddMediaGalleryEntryRaw(requestParameters: ProductAddMediaGalleryEntryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductAddMediaGalleryEntryResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling productAddMediaGalleryEntry.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/product.Product/AddMediaGalleryEntry`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProductAddMediaGalleryEntryRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductAddMediaGalleryEntryResponseFromJSON(jsonValue));
    }

    /**
     */
    async productAddMediaGalleryEntry(requestParameters: ProductAddMediaGalleryEntryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductAddMediaGalleryEntryResponse> {
        const response = await this.productAddMediaGalleryEntryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Assets endpoints
     */
    async productBulkAddAssetsEntriesRaw(requestParameters: ProductBulkAddAssetsEntriesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductBulkAddAssetsEntriesResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling productBulkAddAssetsEntries.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/product.Product/BulkAddAssetsEntries`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProductBulkAddAssetsEntriesRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductBulkAddAssetsEntriesResponseFromJSON(jsonValue));
    }

    /**
     * Assets endpoints
     */
    async productBulkAddAssetsEntries(requestParameters: ProductBulkAddAssetsEntriesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductBulkAddAssetsEntriesResponse> {
        const response = await this.productBulkAddAssetsEntriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async productBulkCreateAttributeRaw(requestParameters: ProductBulkCreateAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntitymanagerBulkCreateAttributeResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling productBulkCreateAttribute.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/product.Product/BulkCreateAttribute`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntitymanagerBulkCreateAttributeRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EntitymanagerBulkCreateAttributeResponseFromJSON(jsonValue));
    }

    /**
     */
    async productBulkCreateAttribute(requestParameters: ProductBulkCreateAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntitymanagerBulkCreateAttributeResponse> {
        const response = await this.productBulkCreateAttributeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async productBulkDeleteProductsRaw(requestParameters: ProductBulkDeleteProductsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling productBulkDeleteProducts.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/product.Product/BulkDeleteProducts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProductBulkDeleteProductsRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async productBulkDeleteProducts(requestParameters: ProductBulkDeleteProductsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.productBulkDeleteProductsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async productBulkRemoveAssetsEntriesRaw(requestParameters: ProductBulkRemoveAssetsEntriesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling productBulkRemoveAssetsEntries.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/product.Product/BulkRemoveAssetsEntries`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProductBulkRemoveAssetsEntriesRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async productBulkRemoveAssetsEntries(requestParameters: ProductBulkRemoveAssetsEntriesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.productBulkRemoveAssetsEntriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * @deprecated
     */
    async productBulkUpdateRaw(requestParameters: ProductBulkUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductBulkUpdateResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling productBulkUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/product.Product/BulkUpdate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProductBulkUpdateRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductBulkUpdateResponseFromJSON(jsonValue));
    }

    /**
     * @deprecated
     */
    async productBulkUpdate(requestParameters: ProductBulkUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductBulkUpdateResponse> {
        const response = await this.productBulkUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async productBulkUpdateAssetsEntriesRaw(requestParameters: ProductBulkUpdateAssetsEntriesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductBulkUpdateAssetsEntriesResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling productBulkUpdateAssetsEntries.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/product.Product/BulkUpdateAssetsEntries`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProductBulkUpdateAssetsEntriesRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductBulkUpdateAssetsEntriesResponseFromJSON(jsonValue));
    }

    /**
     */
    async productBulkUpdateAssetsEntries(requestParameters: ProductBulkUpdateAssetsEntriesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductBulkUpdateAssetsEntriesResponse> {
        const response = await this.productBulkUpdateAssetsEntriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async productBulkUpdateV2Raw(requestParameters: ProductBulkUpdateV2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductBulkUpdateResponseV2>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling productBulkUpdateV2.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/product.Product/BulkUpdateV2`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProductBulkUpdateRequestV2ToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductBulkUpdateResponseV2FromJSON(jsonValue));
    }

    /**
     */
    async productBulkUpdateV2(requestParameters: ProductBulkUpdateV2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductBulkUpdateResponseV2> {
        const response = await this.productBulkUpdateV2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async productCreateAttributeGroupRaw(requestParameters: ProductCreateAttributeGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntitymanagerAttributeGroup>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling productCreateAttributeGroup.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/product.Product/CreateAttributeGroup`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntitymanagerCreateAttributeGroupRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EntitymanagerAttributeGroupFromJSON(jsonValue));
    }

    /**
     */
    async productCreateAttributeGroup(requestParameters: ProductCreateAttributeGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntitymanagerAttributeGroup> {
        const response = await this.productCreateAttributeGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async productCreateAttributeOptionsRaw(requestParameters: ProductCreateAttributeOptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntitymanagerCreateAttributeOptionsResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling productCreateAttributeOptions.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/product.Product/CreateAttributeOptions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntitymanagerCreateAttributeOptionsRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EntitymanagerCreateAttributeOptionsResponseFromJSON(jsonValue));
    }

    /**
     */
    async productCreateAttributeOptions(requestParameters: ProductCreateAttributeOptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntitymanagerCreateAttributeOptionsResponse> {
        const response = await this.productCreateAttributeOptionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async productCreateEntityRaw(requestParameters: ProductCreateEntityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntitymanagerCreateEntityResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling productCreateEntity.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/product.Product/CreateEntity`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntitymanagerEntityToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EntitymanagerCreateEntityResponseFromJSON(jsonValue));
    }

    /**
     */
    async productCreateEntity(requestParameters: ProductCreateEntityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntitymanagerCreateEntityResponse> {
        const response = await this.productCreateEntityRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async productCreateOptionsListRaw(requestParameters: ProductCreateOptionsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntitymanagerCreateOptionsListResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling productCreateOptionsList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/product.Product/CreateOptionsList`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntitymanagerCreateOptionsListRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EntitymanagerCreateOptionsListResponseFromJSON(jsonValue));
    }

    /**
     */
    async productCreateOptionsList(requestParameters: ProductCreateOptionsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntitymanagerCreateOptionsListResponse> {
        const response = await this.productCreateOptionsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * @deprecated
     */
    async productCreateProductRaw(requestParameters: ProductCreateProductOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductCreateProductResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling productCreateProduct.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/product.Product/CreateProduct`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProductCreateProductRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductCreateProductResponseFromJSON(jsonValue));
    }

    /**
     * @deprecated
     */
    async productCreateProduct(requestParameters: ProductCreateProductOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductCreateProductResponse> {
        const response = await this.productCreateProductRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async productCreateProductV2Raw(requestParameters: ProductCreateProductV2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductCreateProductResponseV2>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling productCreateProductV2.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/product.Product/CreateProductV2`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProductCreateProductRequestV2ToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductCreateProductResponseV2FromJSON(jsonValue));
    }

    /**
     */
    async productCreateProductV2(requestParameters: ProductCreateProductV2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductCreateProductResponseV2> {
        const response = await this.productCreateProductV2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * @deprecated
     */
    async productDeleteRaw(requestParameters: ProductDeleteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductDeleteResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling productDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/product.Product/Delete`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProductDeleteRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductDeleteResponseFromJSON(jsonValue));
    }

    /**
     * @deprecated
     */
    async productDelete(requestParameters: ProductDeleteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductDeleteResponse> {
        const response = await this.productDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async productDeleteAttributeRaw(requestParameters: ProductDeleteAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling productDeleteAttribute.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/product.Product/DeleteAttribute`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntitymanagerDeleteAttributeRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async productDeleteAttribute(requestParameters: ProductDeleteAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.productDeleteAttributeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async productDeleteProductRaw(requestParameters: ProductDeleteProductOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling productDeleteProduct.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/product.Product/DeleteProduct`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProductDeleteProductRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async productDeleteProduct(requestParameters: ProductDeleteProductOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.productDeleteProductRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async productGetAttributeGroupRaw(requestParameters: ProductGetAttributeGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntitymanagerAttributeGroup>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling productGetAttributeGroup.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/product.Product/GetAttributeGroup`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntitymanagerGetAttributeGroupRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EntitymanagerAttributeGroupFromJSON(jsonValue));
    }

    /**
     */
    async productGetAttributeGroup(requestParameters: ProductGetAttributeGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntitymanagerAttributeGroup> {
        const response = await this.productGetAttributeGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async productGetAttributeOptionRaw(requestParameters: ProductGetAttributeOptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntitymanagerGetAttributeOptionResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling productGetAttributeOption.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/product.Product/GetAttributeOption`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntitymanagerGetAttributeOptionRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EntitymanagerGetAttributeOptionResponseFromJSON(jsonValue));
    }

    /**
     */
    async productGetAttributeOption(requestParameters: ProductGetAttributeOptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntitymanagerGetAttributeOptionResponse> {
        const response = await this.productGetAttributeOptionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async productGetAttributeOptionsRaw(requestParameters: ProductGetAttributeOptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntitymanagerGetAttributeOptionsResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling productGetAttributeOptions.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/product.Product/GetAttributeOptions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntitymanagerGetAttributeOptionsRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EntitymanagerGetAttributeOptionsResponseFromJSON(jsonValue));
    }

    /**
     */
    async productGetAttributeOptions(requestParameters: ProductGetAttributeOptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntitymanagerGetAttributeOptionsResponse> {
        const response = await this.productGetAttributeOptionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async productGetEntityRaw(requestParameters: ProductGetEntityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntitymanagerEntity>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling productGetEntity.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/product.Product/GetEntity`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntitymanagerEntityRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EntitymanagerEntityFromJSON(jsonValue));
    }

    /**
     */
    async productGetEntity(requestParameters: ProductGetEntityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntitymanagerEntity> {
        const response = await this.productGetEntityRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async productGetOptionsListRaw(requestParameters: ProductGetOptionsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntitymanagerGetOptionsListResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling productGetOptionsList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/product.Product/GetOptionsList`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntitymanagerGetOptionsListRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EntitymanagerGetOptionsListResponseFromJSON(jsonValue));
    }

    /**
     */
    async productGetOptionsList(requestParameters: ProductGetOptionsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntitymanagerGetOptionsListResponse> {
        const response = await this.productGetOptionsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async productGetProductRaw(requestParameters: ProductGetProductOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductGetProductResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling productGetProduct.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/product.Product/GetProduct`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProductGetProductRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductGetProductResponseFromJSON(jsonValue));
    }

    /**
     */
    async productGetProduct(requestParameters: ProductGetProductOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductGetProductResponse> {
        const response = await this.productGetProductRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async productGetProductByCodeRaw(requestParameters: ProductGetProductByCodeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductGetProductByCodeResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling productGetProductByCode.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/product.Product/GetProductByCode`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProductGetProductByCodeRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductGetProductByCodeResponseFromJSON(jsonValue));
    }

    /**
     */
    async productGetProductByCode(requestParameters: ProductGetProductByCodeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductGetProductByCodeResponse> {
        const response = await this.productGetProductByCodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async productGetProductByUrlKeyRaw(requestParameters: ProductGetProductByUrlKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductGetProductByUrlKeyResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling productGetProductByUrlKey.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/product.Product/GetProductByUrlKey`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProductGetProductByUrlKeyRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductGetProductByUrlKeyResponseFromJSON(jsonValue));
    }

    /**
     */
    async productGetProductByUrlKey(requestParameters: ProductGetProductByUrlKeyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductGetProductByUrlKeyResponse> {
        const response = await this.productGetProductByUrlKeyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Attribute Groups endpoints
     */
    async productListAttributeGroupsRaw(requestParameters: ProductListAttributeGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntitymanagerListAttributeGroupsResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling productListAttributeGroups.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/product.Product/ListAttributeGroups`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntitymanagerListAttributeGroupsRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EntitymanagerListAttributeGroupsResponseFromJSON(jsonValue));
    }

    /**
     * Attribute Groups endpoints
     */
    async productListAttributeGroups(requestParameters: ProductListAttributeGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntitymanagerListAttributeGroupsResponse> {
        const response = await this.productListAttributeGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async productListAttributeOptionsRaw(requestParameters: ProductListAttributeOptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntitymanagerListAttributeOptionsResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling productListAttributeOptions.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/product.Product/ListAttributeOptions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntitymanagerListAttributeOptionsRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EntitymanagerListAttributeOptionsResponseFromJSON(jsonValue));
    }

    /**
     */
    async productListAttributeOptions(requestParameters: ProductListAttributeOptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntitymanagerListAttributeOptionsResponse> {
        const response = await this.productListAttributeOptionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async productListEntitiesRaw(requestParameters: ProductListEntitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntitymanagerListEntitiesResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling productListEntities.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/product.Product/ListEntities`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntitymanagerListEntitiesRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EntitymanagerListEntitiesResponseFromJSON(jsonValue));
    }

    /**
     */
    async productListEntities(requestParameters: ProductListEntitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntitymanagerListEntitiesResponse> {
        const response = await this.productListEntitiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async productListOptionsListsRaw(requestParameters: ProductListOptionsListsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntitymanagerListOptionsListsResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling productListOptionsLists.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/product.Product/ListOptionsLists`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntitymanagerListOptionsListsRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EntitymanagerListOptionsListsResponseFromJSON(jsonValue));
    }

    /**
     */
    async productListOptionsLists(requestParameters: ProductListOptionsListsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntitymanagerListOptionsListsResponse> {
        const response = await this.productListOptionsListsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async productListProductsRaw(requestParameters: ProductListProductsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductListProductsResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling productListProducts.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/product.Product/ListProducts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProductListProductsRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductListProductsResponseFromJSON(jsonValue));
    }

    /**
     */
    async productListProducts(requestParameters: ProductListProductsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductListProductsResponse> {
        const response = await this.productListProductsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async productListProductsByIdsRaw(requestParameters: ProductListProductsByIdsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductListProductsByIdsResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling productListProductsByIds.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/product.Product/ListProductsByIds`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProductListProductsByIdsRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductListProductsByIdsResponseFromJSON(jsonValue));
    }

    /**
     */
    async productListProductsByIds(requestParameters: ProductListProductsByIdsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductListProductsByIdsResponse> {
        const response = await this.productListProductsByIdsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async productListProductsBySkuRaw(requestParameters: ProductListProductsBySkuOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductListProductsBySkuResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling productListProductsBySku.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/product.Product/ListProductsBySku`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProductListProductsBySkuRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductListProductsBySkuResponseFromJSON(jsonValue));
    }

    /**
     */
    async productListProductsBySku(requestParameters: ProductListProductsBySkuOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductListProductsBySkuResponse> {
        const response = await this.productListProductsBySkuRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async productListVariantsBySkuRaw(requestParameters: ProductListVariantsBySkuOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductListVariantsBySkuResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling productListVariantsBySku.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/product.Product/ListVariantsBySku`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProductListVariantsBySkuRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductListVariantsBySkuResponseFromJSON(jsonValue));
    }

    /**
     */
    async productListVariantsBySku(requestParameters: ProductListVariantsBySkuOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductListVariantsBySkuResponse> {
        const response = await this.productListVariantsBySkuRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async productRemoveMediaGalleryEntryRaw(requestParameters: ProductRemoveMediaGalleryEntryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling productRemoveMediaGalleryEntry.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/product.Product/RemoveMediaGalleryEntry`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProductRemoveMediaGalleryEntryRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async productRemoveMediaGalleryEntry(requestParameters: ProductRemoveMediaGalleryEntryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.productRemoveMediaGalleryEntryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async productUpdateAttributeRaw(requestParameters: ProductUpdateAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntitymanagerAttribute>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling productUpdateAttribute.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/product.Product/UpdateAttribute`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntitymanagerUpdateAttributeRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EntitymanagerAttributeFromJSON(jsonValue));
    }

    /**
     */
    async productUpdateAttribute(requestParameters: ProductUpdateAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntitymanagerAttribute> {
        const response = await this.productUpdateAttributeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async productUpdateAttributeGroupRaw(requestParameters: ProductUpdateAttributeGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntitymanagerAttributeGroup>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling productUpdateAttributeGroup.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/product.Product/UpdateAttributeGroup`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntitymanagerUpdateAttributeGroupRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EntitymanagerAttributeGroupFromJSON(jsonValue));
    }

    /**
     */
    async productUpdateAttributeGroup(requestParameters: ProductUpdateAttributeGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntitymanagerAttributeGroup> {
        const response = await this.productUpdateAttributeGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * rpc GetAttributeOptionByCode (product.entitymanager.GetAttributeOptionByCodeRequest) returns (product.entitymanager.GetAttributeOptionByCodeResponse) {}
     */
    async productUpdateAttributeOptionsRaw(requestParameters: ProductUpdateAttributeOptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntitymanagerUpdateAttributeOptionsResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling productUpdateAttributeOptions.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/product.Product/UpdateAttributeOptions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntitymanagerUpdateAttributeOptionsRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EntitymanagerUpdateAttributeOptionsResponseFromJSON(jsonValue));
    }

    /**
     * rpc GetAttributeOptionByCode (product.entitymanager.GetAttributeOptionByCodeRequest) returns (product.entitymanager.GetAttributeOptionByCodeResponse) {}
     */
    async productUpdateAttributeOptions(requestParameters: ProductUpdateAttributeOptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntitymanagerUpdateAttributeOptionsResponse> {
        const response = await this.productUpdateAttributeOptionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async productUpdateMediaGalleryEntryRaw(requestParameters: ProductUpdateMediaGalleryEntryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling productUpdateMediaGalleryEntry.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/product.Product/UpdateMediaGalleryEntry`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProductUpdateMediaGalleryEntryRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async productUpdateMediaGalleryEntry(requestParameters: ProductUpdateMediaGalleryEntryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.productUpdateMediaGalleryEntryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async productUpdateOptionsListRaw(requestParameters: ProductUpdateOptionsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntitymanagerUpdateOptionsListResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling productUpdateOptionsList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/product.Product/UpdateOptionsList`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntitymanagerUpdateOptionsListRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EntitymanagerUpdateOptionsListResponseFromJSON(jsonValue));
    }

    /**
     */
    async productUpdateOptionsList(requestParameters: ProductUpdateOptionsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntitymanagerUpdateOptionsListResponse> {
        const response = await this.productUpdateOptionsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * @deprecated
     */
    async productUpdateProductRaw(requestParameters: ProductUpdateProductOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductUpdateProductResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling productUpdateProduct.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/product.Product/UpdateProduct`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProductUpdateProductRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductUpdateProductResponseFromJSON(jsonValue));
    }

    /**
     * @deprecated
     */
    async productUpdateProduct(requestParameters: ProductUpdateProductOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductUpdateProductResponse> {
        const response = await this.productUpdateProductRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async productUpdateProductV2Raw(requestParameters: ProductUpdateProductV2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling productUpdateProductV2.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/product.Product/UpdateProductV2`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProductUpdateProductRequestV2ToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async productUpdateProductV2(requestParameters: ProductUpdateProductV2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.productUpdateProductV2Raw(requestParameters, initOverrides);
        return await response.value();
    }

}
